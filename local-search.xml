<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>完了，遇上个大麻烦，git push 失败</title>
    <link href="/2021/06/30/%E5%AE%8C%E4%BA%86%EF%BC%8C%E9%81%87%E4%B8%8A%E4%B8%AA%E5%A4%A7%E9%BA%BB%E7%83%A6%EF%BC%8Cgit-push-%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/06/30/%E5%AE%8C%E4%BA%86%EF%BC%8C%E9%81%87%E4%B8%8A%E4%B8%AA%E5%A4%A7%E9%BA%BB%E7%83%A6%EF%BC%8Cgit-push-%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>就乱折腾解决了…/😃</p></blockquote><span id="more"></span><p><code>git push</code> 出现如下的报错信息：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">remote: Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead.<br>remote: Please see https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/ <span class="hljs-keyword">for</span> more information.<br>fatal: unable to access <span class="hljs-string">&#x27;https://github.com/kok-s0s/Notes.git/&#x27;</span>: The requested URL returned error: 403<br></code></pre></div></td></tr></table></figure><p>其实按照给的链接，应该是我需要设置令牌才能进行 <code>git</code> 相关操作，但是按照有尝试官方给的信息去设置但也无法解决问题。</p><p>但好家伙，下午出现的问题，居然被我云里雾里地解决了。</p><p>我想着要不重装下 <code>git</code> 试试吧，就习惯性地用 <code>brew</code> 来进行下载，输入 <code>brew install git</code> ，其实当时下载完重试 <code>git push</code> 也还是失败的，解决就我晚上吃个饭回来，再重新试试。</p><p>结果此时我的 <code>git</code> 就变成了中文版了， <code>git push</code> 操作也成功，就感觉很奇妙，原先的 <code>git</code> 是用 <code>macOS</code> 提示可直接命令行输入 <code>git</code> 即可下载该工具，我现在用 <code>brew</code> 又安装了一个中文版的 <code>git</code> ，大概是覆盖了原先的 <code>git</code> ，因为我的 <code>brew</code> 用的国内源，没想到还有个中文的 <code>git</code> ，真是有意思，还挺方便的，但是感觉不太习惯，大概有空会想办法弄回英文的，会顺手些。</p><p><img src="/images/git-push-ok.png" alt="中文的git，第一次见" /></p><p><s>目前先用这 <code>Github Desktop</code> 这个软件来进行 <code>push</code> 操作。</s></p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Joe-我心中永远的强者</title>
    <link href="/2021/06/28/Joe-%E6%88%91%E5%BF%83%E4%B8%AD%E6%B0%B8%E8%BF%9C%E7%9A%84%E5%BC%BA%E8%80%85/"/>
    <url>/2021/06/28/Joe-%E6%88%91%E5%BF%83%E4%B8%AD%E6%B0%B8%E8%BF%9C%E7%9A%84%E5%BC%BA%E8%80%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>世界上只有一种英雄主义，那就是看清了生活的本质，却依然热爱生活。 —罗曼. 罗兰</p></blockquote><span id="more"></span><p><strong>Joe不是“丈”</strong></p><p>他有着属于自己的家</p><p>他无需来燃尽自己的生命证明自己对拳击的热爱</p><p>他早已在巅峰证明自己货真价实的实力</p><p>他是个王者，也是个普通人</p><hr /><p><img src="/images/joe.png" alt="失败总会有，但这并不会很可怕" /></p><p><img src="/images/life.png" alt="南部和Joe" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vimtutor</title>
    <link href="/2021/06/23/Vimtutor/"/>
    <url>/2021/06/23/Vimtutor/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Vimtutor-Record</p></blockquote><span id="more"></span><h1 id="lesson-1"><a class="markdownIt-Anchor" href="#lesson-1"></a> lesson 1</h1><h2 id="lesson-11"><a class="markdownIt-Anchor" href="#lesson-11"></a> lesson 1.1</h2><p>上下左右键的使用：</p><ul><li>上—<code>k</code></li><li>下—<code>j</code></li><li>左—<code>h</code></li><li>右—<code>l</code></li></ul><h2 id="lesson-12"><a class="markdownIt-Anchor" href="#lesson-12"></a> lesson 1.2</h2><p>输入框模式下输入 <code>q!</code> ，所做修改不会被保存，然后退出编辑。</p><h2 id="lesson-13"><a class="markdownIt-Anchor" href="#lesson-13"></a> lesson 1.3</h2><p>在正常模式（Normal）下，按下 <code>x</code> 会删除当前光标的字符。</p><h2 id="lesson-14"><a class="markdownIt-Anchor" href="#lesson-14"></a> lesson 1.4</h2><p>输入 <code>i</code> 进入编辑模式，直接在当前字符位置上插入文本信息。</p><h2 id="lesson-15"><a class="markdownIt-Anchor" href="#lesson-15"></a> lesson 1.5</h2><p>输入 <code>A</code> 进入编辑模式，而且会直接跳转到该行的末尾来添加文本信息。</p><h2 id="lesson-16"><a class="markdownIt-Anchor" href="#lesson-16"></a> lesson 1.6</h2><p>输入 <code>wq</code> ，会保存所做修改，然后退出编辑。</p><hr /><h1 id="lesson-2"><a class="markdownIt-Anchor" href="#lesson-2"></a> lesson 2</h1><h2 id="lesson-21"><a class="markdownIt-Anchor" href="#lesson-21"></a> lesson 2.1</h2><p>输入 <code>dw</code> 可以删除一个单词至末尾，遇到个非字母的便停止了。</p><h2 id="lesson-22"><a class="markdownIt-Anchor" href="#lesson-22"></a> lesson 2.2</h2><p>输入 <code>d$</code> 会从当前光标到行末。</p><h2 id="lesson-23"><a class="markdownIt-Anchor" href="#lesson-23"></a> lesson 2.3</h2><p>输入 <code>de</code> 会删除从当前光标到单词末尾，包括最后一个字符。是到最后一个字符便停下的，与 <code>dw</code> 还是要区分的。</p><h2 id="lesson-24"><a class="markdownIt-Anchor" href="#lesson-24"></a> lesson 2.4</h2><p>在动作前输入数字会使它重复执行多次。<br />输入 <code>0</code> 会移动光标到行首。</p><h2 id="lesson-25"><a class="markdownIt-Anchor" href="#lesson-25"></a> lesson 2.5</h2><p>尝试 <code>d number(数字)è motion</code> 来实现不同的操作。<br />eg: <code>d2w</code> 会删除两个相邻的单词。</p><h2 id="lesson-26"><a class="markdownIt-Anchor" href="#lesson-26"></a> lesson 2.6</h2><p><code>dd</code> 会删除其所在行；<br /><code>2dd</code> 会删除该光标（包括该行）的两行；</p><h2 id="lesson-27"><a class="markdownIt-Anchor" href="#lesson-27"></a> lesson 2.7</h2><p>输入小写字母的 <code>u</code> 能够撤销最后执行的命令；<br />输入大写字母的 <code>U</code> 能够撤销对整行的修改；<br />按住 <code>Ctrl</code> 再按大写字母的 <code>R</code> 能够重做被撤销的操作；</p><hr /><h1 id="lesson-3"><a class="markdownIt-Anchor" href="#lesson-3"></a> lesson 3</h1><h2 id="lesson-31"><a class="markdownIt-Anchor" href="#lesson-31"></a> lesson 3.1</h2><p>置入指令 <code>p</code> ，适合搭配 <code>dd</code> 删除指令使用， <code>dd</code> 删除的行会被放入一个寄存器中，你在你想要粘贴的位置的上一行上按下 <code>p</code> ，被删除的行会插入到放入光标的下一行中。以上所有的操作均需要在正常模式（Normal）下。</p><h2 id="lesson-32"><a class="markdownIt-Anchor" href="#lesson-32"></a> lesson 3.2</h2><p>替换指令 <code>r</code> ，你如果有要修改的字符，只需要将光标指向修改处，在正常模式下按下 <code>r</code> ，再输入你想要替换成的字符即可。</p><h2 id="lesson-33"><a class="markdownIt-Anchor" href="#lesson-33"></a> lesson 3.3</h2><p>想要不仅仅更改一个字符而是一个单词，可以在正常模式下使用 <code>ce</code> 指令，该指令会自动删除光标所指字符至单词末尾，此时你可以输入你要修改成的内容，其实你可以修改多个字符也意味着你从vim的正常模式进入到了编辑模式。</p><h2 id="lesson-34"><a class="markdownIt-Anchor" href="#lesson-34"></a> lesson 3.4</h2><p>尝试 <code>c [number] motion</code> 实现更多的操作。<br />eg: <code>c$</code> 能让你重新编辑光标后所有的内容（仅限光标所在行）</p><hr /><h1 id="lesson-4"><a class="markdownIt-Anchor" href="#lesson-4"></a> lesson 4</h1><h2 id="lesson-41"><a class="markdownIt-Anchor" href="#lesson-41"></a> lesson 4.1</h2><p><code>Ctrl + G</code> 显示当前编辑文件中当前光标所在位置以及文本状态信息；<br /><code>G</code> 正常模式下会自动跳转到文本的最后一行；<br /><code>gg</code> 正常模式下会自动跳转到文本的第一行；</p><h2 id="lesson-42"><a class="markdownIt-Anchor" href="#lesson-42"></a> lesson 4.2</h2><p>输入框模式下输入 <code>/</code> 后面跟着你要搜索的字符，你可以看到有哪些字符匹配上，此时输入 <code>n</code> 会跳转到下一个匹配项，输入 <code>N</code> 会跳转到上一个匹配项。要逆向搜索可以使用 <code>?</code> 来进行搜索。</p><h2 id="lesson-43"><a class="markdownIt-Anchor" href="#lesson-43"></a> lesson 4.3</h2><p>输入 <code>%</code> 能够查找匹配的括号— <code>(), &#123;&#125;, []</code> 。</p><h2 id="lesson-44"><a class="markdownIt-Anchor" href="#lesson-44"></a> lesson 4.4</h2><p>输入框模式下<br />输入 <code>:s/old/new/g</code> 可以替换光标所在行中所有 <code>old</code> 字符串修改成 <code>new</code> 。<br />输入 <code>:#, #s/old/new/g</code> 其中 #, # 代表的是替换操作的若干行中首尾两行的行号。<br />输入 <code>:%s/old/new/g</code> 则是替换整个文件中的每个匹配串。<br />输入 <code>:%s/old/new/gc</code> 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。</p><hr /><h1 id="lesson-5"><a class="markdownIt-Anchor" href="#lesson-5"></a> lesson 5</h1><h2 id="lesson-51"><a class="markdownIt-Anchor" href="#lesson-51"></a> lesson 5.1</h2><p>输入框输入 <code>!</code> ，此时可以在 <code>vim</code> 里使用外部的指令。</p><h2 id="lesson-52"><a class="markdownIt-Anchor" href="#lesson-52"></a> lesson 5.2</h2><p>使用 <code>v</code> 移动光标，能够选中一些文本信息，此时在正常模式键入 <code>:</code> 到输入框，此时输入框会显示 <code>'&lt;'&gt;</code> ，此时输入 <code>w Test</code> ，按下回车键，你之前光标选中的文本内容会被保存到 <code>Test</code> 文件中。</p><h2 id="lesson-53"><a class="markdownIt-Anchor" href="#lesson-53"></a> lesson 5.3</h2><p>在输入框使用置换指令 <code>r</code> ，例如 <code>r Test</code> ，之前保存的 <code>Test</code> 文件的文本信息会插入你当前光标所在位置，从光标处开始置入文本信息。</p><hr /><h1 id="lesson-6"><a class="markdownIt-Anchor" href="#lesson-6"></a> lesson 6</h1><h2 id="lesson-61"><a class="markdownIt-Anchor" href="#lesson-61"></a> lesson 6.1</h2><p>正常模式下输入 <code>o</code> 将在光标的下方打开新的一行并进入插入模式。<br />而输入大写的 <code>O</code> 将在光标的上方打开新的一行并进入插入模式。</p><h2 id="lesson-62"><a class="markdownIt-Anchor" href="#lesson-62"></a> lesson 6.2</h2><p>正常模式下输入 <code>a</code> 将在光标所在字符的后面进入编辑模式。</p><h2 id="lesson-63"><a class="markdownIt-Anchor" href="#lesson-63"></a> lesson 6.3</h2><p>正常模式下输入大写的 <code>R</code> 可以连续替换多个字符，同时也是进入编辑模式。只不过是替换模式，每个输入的字符都会替换原本的字符，不同于插入模式（只能插入字符，输入字符不会替换原有字符）。</p><h2 id="lesson-64"><a class="markdownIt-Anchor" href="#lesson-64"></a> lesson 6.4</h2><p>正常模式下能够使用 <code>y</code> 加上其它操作符达到复制的效果，例如 <code>y$</code> 会复制光标之后的所有文本信息（仅限光标所在行），然后可以使用指令 <code>p</code> 将文本信息粘贴至你所指定的位置（即新的光标位置处）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho与Hexo的使用体验</title>
    <link href="/2021/06/23/Typecho%E4%B8%8EHexo%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <url>/2021/06/23/Typecho%E4%B8%8EHexo%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>现在是6月23日的凌晨，折腾完了 <code>hexo-melody</code> 主题的博客搭建，顺手写篇博文记录下自己的感受。</p></blockquote><span id="more"></span><p><strong>也可能算个测试文章</strong></p><p>这个主题是第一次尝试，之前也使用过 <code>hexo</code> ，只不过用的很普通的 <code>next</code> 主题。<br />这个主题我依照<a href="https://molunerfinn.com/hexo-theme-melody-doc/">官方文档</a>来对自己的博客修改。总体而言，我感觉观感比 <code>next</code> 主题好太多了。我现在有两个博客，另一个是 <code>Typecho</code> 的 <code>handsome</code> 主题，其实我现在也说不出具体的使用差异，后序会补充的，还是直接说说静态博客的缺点，就是写文章，因为是静态的，时常需要引用外部链接，但可能链接失效了，你又需要重新调整的你的文章，但Typecho的可以直接上传到自己的服务器生成图床链接来进行使用，其次，动态的有个域名，可以让国内也好访问到，但是因为我挂载在 <code>GitHub</code> 上，国内有时浏览不了，需要科学上网，其实这很不利分享你的博文给别人看，尽管也能挂载到国内的 <code>Gitee</code> ，但<strong>dddd</strong>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/22/hello-world/"/>
    <url>/2021/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! <span id="more"></span>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线段树</title>
    <link href="/2020/06/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2020/06/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>看视频学呀！</p></blockquote><span id="more"></span><h2 id="b站视频"><a class="markdownIt-Anchor" href="#b站视频"></a> <a href="https://www.bilibili.com/video/BV1cb411t7AM?from=search&amp;seid=6008604856900556199">B站视频</a></h2><p>基本线段树实现代码（B站）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_LEN 1000</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build_tree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> tree[],<span class="hljs-keyword">int</span> node,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;<br><span class="hljs-keyword">if</span>(start==end)&#123;<br>tree[node]=arr[start];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> mid=(start+end)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> left_node=<span class="hljs-number">2</span>*node+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> right_node=<span class="hljs-number">2</span>*node+<span class="hljs-number">2</span>;<br><span class="hljs-built_in">build_tree</span>(arr,tree,left_node,start,mid);<br><span class="hljs-built_in">build_tree</span>(arr,tree,right_node,mid+<span class="hljs-number">1</span>,end);<br>tree[node]=tree[left_node]+tree[right_node];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_tree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> tree[],<span class="hljs-keyword">int</span> node,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end,<span class="hljs-keyword">int</span> idx,<span class="hljs-keyword">int</span> val)</span></span>&#123;<br><span class="hljs-keyword">if</span>(start==end)&#123;<br>arr[idx]=val;<br>tree[node]=val;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> mid=(start+end)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> left_node=<span class="hljs-number">2</span>*node+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> right_node=<span class="hljs-number">2</span>*node+<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(idx&gt;=start&amp;&amp;idx&lt;=mid)&#123;<br><span class="hljs-built_in">update_tree</span>(arr,tree,left_node,start,mid,idx,val);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">update_tree</span>(arr,tree,right_node,mid+<span class="hljs-number">1</span>,end,idx,val);<br>&#125;<br>tree[node]=tree[left_node]+tree[right_node];<br>&#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_tree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> tree[],<span class="hljs-keyword">int</span> node,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span>&#123;<br><span class="hljs-keyword">if</span>(R&lt;=start||L&gt;end)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L&lt;=start&amp;&amp;end&lt;=R)&#123;<br><span class="hljs-keyword">return</span> tree[node];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> mid=(start+end)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> left_node=<span class="hljs-number">2</span>*node+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> right_node=<span class="hljs-number">2</span>*node+<span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> sum_left=<span class="hljs-built_in">query_tree</span>(arr,tree,left_node,start,mid,L,R);<br><span class="hljs-keyword">int</span> sum_right=<span class="hljs-built_in">query_tree</span>(arr,tree,right_node,mid+<span class="hljs-number">1</span>,end,L,R);<br><span class="hljs-keyword">return</span> sum_left+sum_right;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> arr[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>&#125;;<br><span class="hljs-keyword">int</span> size=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">int</span> tree[MAX_LEN]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">build_tree</span>(arr,tree,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,size<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">15</span>;++i)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tree[%d]=%d\n&quot;</span>,i,tree[i]);<br>&#125; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">update_tree</span>(arr,tree,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,size<span class="hljs-number">-1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">15</span>;++i)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tree[%d]=%d\n&quot;</span>,i,tree[i]);<br>&#125; <br><span class="hljs-keyword">int</span> sum=<span class="hljs-built_in">query_tree</span>(arr,tree,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,size<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(2-5)=%d\n&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="作业题zoj"><a class="markdownIt-Anchor" href="#作业题zoj"></a> <a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827365109">作业题zoj</a></h2><p><strong>Count the Colors</strong></p><p>颜色覆盖问题</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN=<span class="hljs-number">8010</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l,r;<br>    <span class="hljs-keyword">int</span> color;<br>&#125;segTree[MAXN*<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> color[MAXN];<br><span class="hljs-keyword">int</span> temp;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    segTree[i].l=l;<br>    segTree[i].r=r;<br>    segTree[i].color=<span class="hljs-number">-1</span>;<span class="hljs-comment">//-1表示没有颜色</span><br>    <span class="hljs-keyword">if</span>(l+<span class="hljs-number">1</span>==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=((l+r)&gt;&gt;<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">Build</span>(i&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-built_in">Build</span>((i&lt;&lt;<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>,mid,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(segTree[i].color==c)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=segTree[i].l&amp;&amp;r&gt;=segTree[i].r)<br>    &#123;<br>        segTree[i].color=c;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(segTree[i].color&gt;=<span class="hljs-number">0</span>)<span class="hljs-comment">//存在颜色，往下更新</span><br>    &#123;<br>        segTree[i&lt;&lt;<span class="hljs-number">1</span>].color=segTree[i].color;<br>        segTree[(i&lt;&lt;<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>].color=segTree[i].color;<br>        segTree[i].color=<span class="hljs-number">-2</span>;<span class="hljs-comment">//表示有多种颜色</span><br>    &#125;<br>    <span class="hljs-keyword">int</span> mid=((segTree[i].l+segTree[i].r)&gt;&gt;<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(r&lt;=mid) <span class="hljs-built_in">insert</span>(i&lt;&lt;<span class="hljs-number">1</span>,l,r,c);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l&gt;=mid) <span class="hljs-built_in">insert</span>((i&lt;&lt;<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>,l,r,c);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">insert</span>(i&lt;&lt;<span class="hljs-number">1</span>,l,mid,c);<br>        <span class="hljs-built_in">insert</span>((i&lt;&lt;<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>,mid,r,c);<br>    &#125;<br>    segTree[i].color=<span class="hljs-number">-2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Count</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//统计各颜色的段数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(segTree[i].color==<span class="hljs-number">-1</span>)<br>    &#123;<br>        temp=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(segTree[i].color!=<span class="hljs-number">-2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(segTree[i].color!=temp)<span class="hljs-comment">//temp存的是前一段的颜色</span><br>        &#123;<br>            color[segTree[i].color]++;<br>            temp=segTree[i].color;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(segTree[i].l+<span class="hljs-number">1</span>!=segTree[i].r)<br>    &#123;<br>        <span class="hljs-built_in">Count</span>(i&lt;&lt;<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">Count</span>((i&lt;&lt;<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-keyword">int</span> n,a,b,c;<br>    <span class="hljs-keyword">int</span> Max;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)!=EOF)<br>    &#123;<br>        <span class="hljs-built_in">Build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8000</span>);<br>        Max=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>            <span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>,a,b,c);<br>            <span class="hljs-keyword">if</span>(c&gt;Max)Max=c;<br>        &#125;<br>        temp=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">memset</span>(color,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(color));<br>        <span class="hljs-built_in">Count</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=Max;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(color[i])<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,i,color[i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关模板学习"><a class="markdownIt-Anchor" href="#相关模板学习"></a> <a href="https://blog.csdn.net/iwts_24/article/details/81484561">相关模板学习</a></h2><h2 id="csdn线段树学习"><a class="markdownIt-Anchor" href="#csdn线段树学习"></a> <a href="https://blog.csdn.net/zearot/article/details/48299459">csdn线段树学习</a></h2><h2 id="约瑟夫环问题"><a class="markdownIt-Anchor" href="#约瑟夫环问题"></a> <a href="https://blog.csdn.net/zzzzhdx/article/details/82946898">约瑟夫环问题</a></h2><h3 id="数学解决"><a class="markdownIt-Anchor" href="#数学解决"></a> 数学解决</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,k,s;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;k,&amp;s);<br>s=s<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)<br>&#123;<br>s=(s+k)%i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,s+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;winner:%d&quot;</span>,s+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="线段树解决"><a class="markdownIt-Anchor" href="#线段树解决"></a> 线段树解决</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br><span class="hljs-keyword">int</span> num;<br><span class="hljs-keyword">int</span> l;<br><span class="hljs-keyword">int</span> r;<br>&#125;;<br><br>node *tree;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> index)</span></span>&#123; <br>tree[index].l=left;<br>tree[index].r=right;<br><span class="hljs-keyword">if</span>(right==left)&#123;<br>tree[index].num=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span>; <br>&#125; <br><span class="hljs-keyword">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">build</span>(left,mid,index&lt;&lt;<span class="hljs-number">1</span>);<br><span class="hljs-built_in">build</span>(mid+<span class="hljs-number">1</span>,right,index&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>tree[index].num=tree[index&lt;&lt;<span class="hljs-number">1</span>].num+tree[index&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">if</span>(tree[index].r==tree[index].l)&#123;<br>tree[index].num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> tree[index].r;<br>&#125;<br>tree[index].num--;<br><br><span class="hljs-keyword">if</span>(p&lt;=tree[index&lt;&lt;<span class="hljs-number">1</span>].num)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">update</span>(p,index&lt;&lt;<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">update</span>(p-tree[index&lt;&lt;<span class="hljs-number">1</span>].num,index&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,m,k;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&gt;&gt;k)&#123;<br>tree=<span class="hljs-keyword">new</span> node[<span class="hljs-number">3</span>*n];<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> seq=k;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>seq=(seq+m<span class="hljs-number">-1</span>)%tree[<span class="hljs-number">1</span>].num;<br><span class="hljs-keyword">if</span>(seq==<span class="hljs-number">0</span>)<br>seq=tree[<span class="hljs-number">1</span>].num;<br>cout&lt;&lt;<span class="hljs-built_in">update</span>(seq,<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr /><h2 id="作业题zoj2451"><a class="markdownIt-Anchor" href="#作业题zoj2451"></a> <a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827365950">作业题zoj2451</a></h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 222222</span><br><br><span class="hljs-keyword">int</span> L[MAXN], R[MAXN], seg[MAXN];<br><span class="hljs-keyword">int</span> n, M;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>L[i] = l;<br>R[i] = r;<br>seg[i] = M + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (l == r)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid = ((l + r) &gt;&gt; <span class="hljs-number">1</span>);<br><span class="hljs-built_in">build</span>(i &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br><span class="hljs-built_in">build</span>((i &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>seg[i] = <span class="hljs-built_in">min</span>(seg[i], val);<br><span class="hljs-keyword">if</span> (L[i] == R[i])<br><span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid = (L[i] + R[i]) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (p &lt;= mid)<br><span class="hljs-built_in">update</span>(i &lt;&lt; <span class="hljs-number">1</span>, p, val);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">update</span>((i &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>, p, val);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (L[i] == l &amp;&amp; R[i] == r)<br><span class="hljs-keyword">return</span> seg[i];<br><span class="hljs-keyword">int</span> mid = (L[i] + R[i]) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (r &lt;= mid)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(i &lt;&lt; <span class="hljs-number">1</span>, l, r);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>((i &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>, l, r);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">query</span>(i &lt;&lt; <span class="hljs-number">1</span>, l, mid), <span class="hljs-built_in">query</span>((i &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">2</span> == <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;M))<br>&#123;<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">int</span> a, b;<br><span class="hljs-keyword">while</span> (M--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br><span class="hljs-keyword">int</span> value = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, a, b - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, b, value + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, n, n));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>scnu-ACM-class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>骑士问题_马周游问题</title>
    <link href="/2020/06/21/%E9%AA%91%E5%A3%AB%E9%97%AE%E9%A2%98-%E9%A9%AC%E5%91%A8%E6%B8%B8%E9%97%AE%E9%A2%98/"/>
    <url>/2020/06/21/%E9%AA%91%E5%A3%AB%E9%97%AE%E9%A2%98-%E9%A9%AC%E5%91%A8%E6%B8%B8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>啥，会下棋吗？</p></blockquote><span id="more"></span><h2 id="骑士问题的解决步骤和思路"><a class="markdownIt-Anchor" href="#骑士问题的解决步骤和思路"></a> 骑士问题的解决步骤和思路</h2><p><img src="/images/%E9%AA%91%E5%A3%AB%E9%97%AE%E9%A2%98.png" alt="" /></p><p>选择当前位置,记录还可以继续往下走的位置,如果可以走<br />骑士周游问题的解决步骤和思路继续往下走/不可以就回溯</p><ol><li><p>创建棋盘 chessBoard,是一个二维数组.</p></li><li><p>将当前位置设置为已经访问,然后根据当前位置,计算马儿还能走哪些位置,并放入到一个集合中(ArrayList),最多有8个位置,每走一步,就使用step+1.</p></li><li><p>遍历ArrayList中存放的所有位置,看看哪个可以走通,如果走通,就继续,走不通,就回溯.</p></li><li><p>判断马儿是否完成了任务,使用step和应该走的步数比较,如果没有达到数量,则表示没有完成任务,将整个棋盘置0.</p></li></ol><p>这个不是我搞得，代码实现有些复杂，没时间搞，不过暑假后重写/</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++">版权声明：本文为CSDN博主「Crayondeng」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/crayondeng/article/details/17174951</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">int</span> y;<br>&#125; Step;<br> <br>Step step[<span class="hljs-number">8</span>] = &#123; &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>&#125;, &#123; <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>&#125;, &#123; <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">-2</span>,<span class="hljs-number">1</span>&#125; &#125;;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NextPos</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> nextPosSteps; <span class="hljs-comment">//表示下一位置有多少种走法；走法少的优先考虑</span><br>    <span class="hljs-keyword">int</span> nextPosDirection; <span class="hljs-comment">//下一位置相对于当前位置的方位</span><br>    <span class="hljs-keyword">int</span> nextPosToMidLength; <span class="hljs-comment">//表示当前位置距中间点距离；距离中间点远的优先考虑</span><br> <br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> NextPos &amp;a) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> nextPosSteps &gt; a.nextPosSteps &amp;&amp; nextPosToMidLength &lt; a.nextPosToMidLength;<br>    &#125;<br> <br>&#125;;<br> <br><span class="hljs-keyword">int</span> board[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> M,N; <span class="hljs-comment">//棋盘大小</span><br> <br><span class="hljs-comment">//检测这个位置是否可以走</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; M &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; N &amp;&amp; board[x][y] == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//下一位置有多少种走法</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nextPosHasSteps</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> steps = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(x + step[i].x, y + step[i].y))<br>            steps++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> steps;<br>&#125;<br><span class="hljs-comment">//判断是否回到起点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">returnStart</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//校验最后是否可以回到起点，也就是棋盘的中间位置</span><br>    <span class="hljs-keyword">int</span> midx,midy;<br>    midx = M / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    midy = N / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>        <span class="hljs-keyword">if</span> (x + step[i].x == midx &amp;&amp; y + step[i].y == midy)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//输出结果</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">outputResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> xstart,<span class="hljs-keyword">int</span> ystart)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> num = M * N;<br>    <span class="hljs-keyword">int</span> k = num - board[xstart][ystart];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i)<br>    &#123;<br>        cout&lt;&lt;endl&lt;&lt;endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j)<br>        &#123;<br>            board[i][j] = (board[i][j] + k) % num + <span class="hljs-number">1</span>;<br>            cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;board[i][j];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;endl&lt;&lt;endl;<br>&#125;<br> <br><span class="hljs-comment">//某一位置距离棋盘中心的距离</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">posToMidLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> midx = M / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> midy = N / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">abs</span>(x - midx) + <span class="hljs-built_in">abs</span>(y - midy));<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BackTrace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> xstart,<span class="hljs-keyword">int</span> ystart)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//找到结果</span><br>    <span class="hljs-keyword">if</span> (t == M * N &amp;&amp; <span class="hljs-built_in">returnStart</span>(x,y)) <span class="hljs-comment">//遍历了棋盘的所以位置，并且最后可以回到起点，形成回路</span><br>    &#123;<br>        <span class="hljs-built_in">outputResult</span>(xstart,ystart);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        priority_queue&lt;NextPos&gt; nextPosQueue;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(x + step[i].x, y + step[i].y))<br>            &#123;<br>                NextPos aNextPos;<br>                aNextPos.nextPosSteps = <span class="hljs-built_in">nextPosHasSteps</span>(x + step[i].x, y + step[i].y);<br>                aNextPos.nextPosDirection = i;<br>                aNextPos.nextPosToMidLength = <span class="hljs-built_in">posToMidLength</span>(x + step[i].x,y + step[i].y);<br>                nextPosQueue.<span class="hljs-built_in">push</span>(aNextPos);<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">while</span>(nextPosQueue.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">int</span> d = nextPosQueue.<span class="hljs-built_in">top</span>().nextPosDirection;<br>            nextPosQueue.<span class="hljs-built_in">pop</span>();<br> <br>            x += step[d].x;<br>            y += step[d].y;<br>            board[x][y] = t + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">BackTrace</span>(t + <span class="hljs-number">1</span>, x, y,xstart,ystart);<br>            <span class="hljs-comment">//回溯</span><br>            board[x][y] = <span class="hljs-number">0</span>;<br>            x -= step[d].x;<br>            y -= step[d].y;<br>        &#125;<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">horseRun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> xstart,<span class="hljs-keyword">int</span> ystart)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//初始化棋盘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>            board[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> midx = M / <span class="hljs-number">2</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> midy = N / <span class="hljs-number">2</span> <span class="hljs-number">-1</span>;<br>    board[midx][midy] = <span class="hljs-number">1</span>; <span class="hljs-comment">//从棋盘的中间的位置开始马周游</span><br>    <span class="hljs-built_in">BackTrace</span>(<span class="hljs-number">1</span>, midx, midy,xstart,ystart);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//马周游起始位置</span><br>    <span class="hljs-keyword">int</span> x, y;<br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;请输入棋盘大小m*n|m-n|&lt;=2 且 m和n都为偶数 且 m,n &lt; 20 :&quot;</span>;<br>    cin&gt;&gt;M&gt;&gt;N;<br> <br>    cout&lt;&lt;<span class="hljs-string">&quot;请输入马周游起始位置--横纵坐标0 &lt;= x &lt; &quot;</span>&lt;&lt;M&lt;&lt;<span class="hljs-string">&quot;和0 &lt;= y &lt; &quot;</span>&lt;&lt;N&lt;&lt;<span class="hljs-string">&quot; :&quot;</span>;<br>    cin&gt;&gt;x&gt;&gt;y;<br> <br>    <span class="hljs-built_in">horseRun</span>(x,y); <span class="hljs-comment">//执行马周游</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://blog.csdn.net/crayondeng/article/details/17174951">参看1</a><br /><a href="https://blog.csdn.net/weixin_44307065/article/details/105161480">参考2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SCNU-Algorithms2020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的遍历</title>
    <link href="/2020/06/02/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2020/06/02/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86.jpg" alt="" /></p><span id="more"></span><h2 id="待贴图"><a class="markdownIt-Anchor" href="#待贴图"></a> 待贴图。。。</h2><p>DFS是一个递归算法,在遍历的过程中,先访问的点被压入栈底。拓扑有序是指如果点U到点V有一条弧,则在拓扑序列中U一定在V之前.深度优先算法搜索路径恰恰是一条弧,栈的输出是从最后一个被访问点开始输出,最后一个输出的点是第一个被访问的点.所以是逆的拓扑有序序列</p><h2 id="strongly-connected-components"><a class="markdownIt-Anchor" href="#strongly-connected-components"></a> STrongly Connected Components</h2><p><img src="/images/SCC.jpg" alt="" /></p><p><a href="https://www.cnblogs.com/8023spz/p/12252266.html">作者网址</a></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertices 10 <span class="hljs-comment">/* maximum number of vertices */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;    <span class="hljs-comment">/* vertices are numbered from 0 to MaxVertices-1 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span> *<span class="hljs-title">PtrToVNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span></span><br><span class="hljs-class">&#123;</span><br>    Vertex Vert;<br>    PtrToVNode Next;<br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">Graph</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> NumOfVertices;<br>    <span class="hljs-keyword">int</span> NumOfEdges;<br>    PtrToVNode *Array;<br>&#125;;<br><br><span class="hljs-function">Graph <span class="hljs-title">ReadG</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">/* details omitted */</span><br>    <span class="hljs-keyword">int</span> a, b;<br>    Graph G = (Graph)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(GNode));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;G-&gt;NumOfVertices, &amp;G-&gt;NumOfEdges);<br>    G-&gt;Array = (PtrToVNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PtrToVNode) * G-&gt;NumOfVertices);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G-&gt;NumOfVertices; i++)<br>    &#123;<br>        G-&gt;Array[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G-&gt;NumOfEdges; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        PtrToVNode p = (PtrToVNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(VNode));<br>        p-&gt;Vert = b;<br>        p-&gt;Next = G-&gt;Array[a];<br>        G-&gt;Array[a] = p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> G;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintV</span><span class="hljs-params">(Vertex V)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, V);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StronglyConnectedComponents</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">void</span> (*visit)(Vertex V))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Graph G = <span class="hljs-built_in">ReadG</span>();<br>    <span class="hljs-built_in">StronglyConnectedComponents</span>(G, PrintV);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StronglyConnectedComponents</span><span class="hljs-params">(Graph G, <span class="hljs-keyword">void</span> (*visit)(Vertex V))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> mp[MaxVertices][MaxVertices] = &#123;<span class="hljs-number">0</span>&#125;, num = G-&gt;NumOfVertices;<br>    <span class="hljs-keyword">int</span> vis[MaxVertices] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        PtrToVNode p = G-&gt;Array[i];<br>        <span class="hljs-keyword">while</span> (p)<br>        &#123;<br>            mp[i][p-&gt;Vert] = <span class="hljs-number">1</span>;<br>            p = p-&gt;Next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//利用到floyd算法，得到两个点是否联通的关系。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; num; k++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; num; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (mp[i][k] &amp;&amp; mp[k][j])<br>                    mp[i][j] = <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//for(int l = 0;l &lt; num;l ++) mp[i][j] |= mp[i][l] * mp[l][j]; //上一句可替换为这一句 可达矩阵的n - 1次方可以求出任意一点到另一点是否可达</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (vis[i])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">visit</span>(i);<br>        vis[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; num; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!vis[j] &amp;&amp; mp[i][j] &amp;&amp; mp[j][i])<br>            &#123;<br>                vis[j] = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">visit</span>(j);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="地下迷宫探索"><a class="markdownIt-Anchor" href="#地下迷宫探索"></a> 地下迷宫探索</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> N[<span class="hljs-number">1111</span>][<span class="hljs-number">1111</span>];<br><span class="hljs-keyword">int</span> vis[<span class="hljs-number">1111</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!t)<br>        cout &lt;&lt; v;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i] &amp;&amp; N[v][i])<br>        &#123;<br>            vis[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(i);<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1111</span>; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1111</span>; ++j)<br>            N[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> m, S;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        N[a][b] = N[b][a] = <span class="hljs-number">1</span>;<br>    &#125;<br>    vis[S] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs</span>(S);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot; 0&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="六度空间"><a class="markdownIt-Anchor" href="#六度空间"></a> 六度空间</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> Graph[<span class="hljs-number">1111</span>][<span class="hljs-number">1111</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> vis[<span class="hljs-number">1111</span>];<br><span class="hljs-keyword">int</span> Sum;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> S)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[S] = <span class="hljs-number">1</span>;<br>    queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S);<br>    <span class="hljs-keyword">int</span> start = S, tail, step = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> tmp = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!vis[i] &amp;&amp; Graph[tmp][i])<br>            &#123;<br>                vis[i] = <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(i);<br>                Sum++;<br>                tail = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (start == tmp)<br>        &#123;<br>            start = tail;<br>            step++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (step == <span class="hljs-number">6</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1111</span>; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1111</span>; ++j)<br>            Graph[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">1111</span>);<br>    <span class="hljs-keyword">int</span> m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        Graph[a][b] = Graph[b][a] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        Sum = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">BFS</span>(i);<br>        <span class="hljs-keyword">float</span> ans = (<span class="hljs-keyword">float</span>)Sum / n * <span class="hljs-number">100</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: %.2f%%\n&quot;</span>, i, ans);<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">1111</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="社交网络图中结点的重要性计算"><a class="markdownIt-Anchor" href="#社交网络图中结点的重要性计算"></a> 社交网络图中结点的“重要性”计算</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 11111</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> Graph[maxn][maxn];<br><span class="hljs-keyword">int</span> N, M;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; M;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= N; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == j)<br>                Graph[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                Graph[i][j] = INF;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//输入数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        Graph[a][b] = <span class="hljs-number">1</span>;<br>        Graph[b][a] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//多源路径Floyd更新</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= N; ++k)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= N; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (Graph[i][j] &gt; Graph[i][k] + Graph[k][j])<br>                &#123;<br>                    Graph[i][j] = Graph[i][k] + Graph[k][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//检验是否连通图</span><br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (Graph[<span class="hljs-number">1</span>][i] == INF)<br>        &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> K;<br>    cin &gt;&gt; K;<br>    <span class="hljs-keyword">while</span> (K--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> num;<br>        cin &gt;&gt; num;<br>        <span class="hljs-keyword">if</span> (!flag)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Cc(%d)=%.2f\n&quot;</span>, num, <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">double</span> average = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i)<br>            &#123;<br>                average += Graph[num][i];<br>            &#125;<br>            average = <span class="hljs-number">1.0</span> / (average * <span class="hljs-number">1.0</span> / (N - <span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Cc(%d)=%.2f\n&quot;</span>, num, average);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SCNU-Algorithms2020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盛夏的舞</title>
    <link href="/2020/05/28/%E7%9B%9B%E5%A4%8F%E7%9A%84%E8%88%9E/"/>
    <url>/2020/05/28/%E7%9B%9B%E5%A4%8F%E7%9A%84%E8%88%9E/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/%E7%9B%9B%E5%A4%8F%E7%9A%84%E8%88%9E.webp" alt="" /></p><span id="more"></span><p>这个5月听的最多的歌，男女声音搭配起来让人感觉很沉迷，我也不知道为什么，觉得如果在情感共鸣里，我觉得很多粤语歌很有感觉，但是一些国语歌往往也只是听过就罢了（不是说国语歌不好），个人感觉，粤语歌里有一种韵味，我这个年纪见识也不多，实在不知如何表达（文笔太烂），在此记录下，未来上年纪了再听应该能够表达出了。</p><p>Heyo：<br />我无胆<br />系无你嘅夜晚<br />去合埋眼<br />怕眼见<br />某某同你闲谈<br />某某要离间<br />你同我<br />再无联络<br />要你我拒绝来往<br />而我得我一个<br />将过往去重播<br />往日我共你辩驳<br />一唱一和<br />而今日转眼一望<br />你已不再身旁<br />只得失落陪伴我<br />瑟缩漆黑角落<br />那一幕<br />不见天日<br />好比得不到光的花朵<br />你要去放开我那拜托<br />不要拒绝<br />痛痛快快割开我<br />如何能失去养份<br />再去挺住这躯干<br />言而那奄奄一息的花瓣<br />只可等枯干跌堕<br />只可等枯干跌堕<br />只可等枯干跌落<br />同时间你要远去<br />已没再看一趟<br />Jill：<br />如再记起<br />旧日共你的快乐园地<br />现在是哪位<br />再可跟你<br />来一起来嬉戏<br />如再记起<br />旧日共你躲进窝里飞<br />落日伴我亲你欣赏你<br />曾一起傻的你<br />Heyo：<br />无勇气<br />再走昔日熟悉的街路<br />这刹那我直觉<br />你会走过这马路<br />从来不敢想过碰见<br />彼此今天相逢<br />勾起的种种<br />也勾出了那伤痛<br />我试过再度回味<br />我与你那忆记有多美<br />我努力回避<br />我的错<br />错于我<br />太爱你<br />你抖不了气<br />捉紧你捉得太紧<br />发觉我多亏欠你<br />Jill：<br />而时间<br />要你与我去磨灭证据<br />每一张相片<br />都已随年月褪去<br />Heyo：<br />你再有新的爱侣<br />过去再不想记取<br />再不想占据的底片<br />已抛出废墟<br />道路上满布了你脚步<br />但是路障已设置了我哪有去路<br />就站在这里<br />每晚去借醉<br />方可跟你倾诉<br />若我共你跳那剩下半段的舞<br />Jill：<br />如再记起<br />旧日共你的快乐园地<br />现在是哪位<br />再可跟你<br />来一起来嬉戏<br />Heyo：<br />就算在旧地<br />亦再没有趣味<br />Jill：<br />如再记起<br />旧日共你躲进窝里飞<br />落日伴我亲你欣赏你<br />曾一起傻的你<br />Heyo：<br />你有那么不可替代吗<br />Jill：<br />你也有否不经意念挂<br />Heyo：<br />那串记忆散落成飞花<br />Jill：<br />与你绽放的可再聚吗<br />Heyo：<br />你有那么不可替代吗<br />Jill：<br />与你再去相拥有害吗<br />合：<br />看四季的交织与造化<br />Jill：<br />如再记起<br />旧日共你的快乐园地<br />现在是哪位<br />再可跟你<br />来一起来嬉戏<br />Heyo：<br />就算在旧地<br />亦再没有趣味<br />如再记起<br />旧日共你躲进窝里飞<br />落日伴我亲你欣赏你<br />曾一起傻的你<br />Heyo：<br />就算在旧地<br />没再念记<br />这不过是你</p>]]></content>
    
    
    
    <tags>
      
      <tag>Music</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>找零钱问题</title>
    <link href="/2020/05/20/%E6%89%BE%E9%9B%B6%E9%92%B1%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/20/%E6%89%BE%E9%9B%B6%E9%92%B1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>不要找错钱哦！</p></blockquote><span id="more"></span><p>动态规划的基本概念实际中就是如下几个步骤：</p><p>a.分析最优解的性质，并刻画结构特征。</p><p>b.递归定义的最优解</p><p>c.以自底向上或自顶向下的方式计算出最优解</p><p>d.根据计算优值得到的信息，构造问题的最优解。</p><h2 id="方法个数问题动态规划解决"><a class="markdownIt-Anchor" href="#方法个数问题动态规划解决"></a> 方法个数问题（<a href="https://blog.csdn.net/qq_22152499/article/details/100118915">动态规划解决</a>）</h2><p>有n种不同面值的货币，每种面值的货币可以使用任意张，需要找钱为aim，求换钱有多少种方法，用最少需要多少张货币能够找清。</p><h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2><p>建立一个数组dp[n][m]，n为货币的种类数量，m为aim+1。dp[n][m]用来表示使用前n种货币兑换m面值的种数。</p><p>dp[n][m]有两种情况</p><ul><li>能够使用第n种货币，<code>dp[n][m] = dp[n-1][m]+dp[n][m-peney[n]]</code>，dp[n-1][m]为兑换m面值使用n-1种货币时的兑换方法数量，dp[n][m-peney[n]]为兑换m-peney[n]面值使用n种货币时的兑换方法。</li><li>无法使用第n种货币（货币的面额比需要兑换的m值更大），此时，<code>dp[n][m] = dp[n-1][m]</code>，使用n种货币去兑换面值零钱的方法种数和适用n-1种货币去兑换m面值的方法一样。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> aim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> penny[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cin &gt;&gt; penny[i];<br>    <span class="hljs-keyword">int</span> dp[n][aim + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; aim + <span class="hljs-number">1</span>; ++j)<br>            dp[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; penny[<span class="hljs-number">0</span>] * i &lt;= aim; ++i)<br>        dp[<span class="hljs-number">0</span>][penny[<span class="hljs-number">0</span>] * i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= aim; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= penny[i])<br>            &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - penny[i]];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; aim + <span class="hljs-number">1</span>; ++j)<br>            cout &lt;&lt; dp[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][aim];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, aim;<br>    cin &gt;&gt; n &gt;&gt; aim;<br>    cout &lt;&lt; <span class="hljs-built_in">ans</span>(n, aim);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="最少子张问题贪心解决"><a class="markdownIt-Anchor" href="#最少子张问题贪心解决"></a> 最少子张问题（贪心解决）</h2><p>问和上题一样的情况，用最少子张的个数是多少？</p><h2 id="解决方法-2"><a class="markdownIt-Anchor" href="#解决方法-2"></a> 解决方法</h2><blockquote><p>贪心法，优先选择大面额的纸张，选到不能再选，以此类推，直至结束。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">//测试事例</span><br><span class="hljs-comment">//&#123;50, 20, 10, 5, 1, 0.5, 0.1&#125;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">double</span> MONEY_UNIT[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.1</span>&#125;; <span class="hljs-comment">//钱的所有面额</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> bill_amount = <span class="hljs-number">0</span>;    <span class="hljs-comment">//账单金额</span><br>    <span class="hljs-keyword">double</span> actual_payment = <span class="hljs-number">0</span>; <span class="hljs-comment">//实际付款</span><br>    <span class="hljs-keyword">double</span> change = <span class="hljs-number">0</span>;         <span class="hljs-comment">//找零</span><br>    cin &gt;&gt; bill_amount &gt;&gt; actual_payment;<br>    change = actual_payment - bill_amount;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>; <span class="hljs-comment">//纸张个数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (MONEY_UNIT[i] &lt;= change)<br>        &#123;<br>            change -= MONEY_UNIT[i];<br>            i--;<br>            sum++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!change)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SCNU-Algorithms2020</tag>
      
      <tag>动态规划</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小生成树</title>
    <link href="/2020/05/08/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <url>/2020/05/08/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>做题训练</p></blockquote><span id="more"></span><h2 id="zoj1406_jungle-roads"><a class="markdownIt-Anchor" href="#zoj1406_jungle-roads"></a> <a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827364905">Zoj1406_Jungle Roads</a></h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 111</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, val;<br>    <span class="hljs-built_in">node</span>() &#123;&#125;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c) &#123;<br>        u = a;<br>        v = b;<br>        val = c;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;b) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> val &lt; b.val;<br>    &#125;<br>&#125;;<br>vector&lt;node&gt; edge;<br><span class="hljs-keyword">int</span> bin[N];<br><span class="hljs-keyword">int</span> n, t, val;<br><span class="hljs-keyword">char</span> x[<span class="hljs-number">2</span>], y[<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>        bin[i] = i;<br>    &#125;<br>    edge.<span class="hljs-built_in">clear</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (bin[m] != m)<br>        m = bin[m];<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) != EOF &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-built_in">init</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, &amp;x, &amp;t);<br>            <span class="hljs-keyword">while</span> (t--)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, &amp;y, &amp;val);<br>                edge.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">node</span>(x[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>, y[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>, val));<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(edge.<span class="hljs-built_in">begin</span>(), edge.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> cur = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; edge.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">int</span> fx = <span class="hljs-built_in">find</span>(edge[i].u);<br>            <span class="hljs-keyword">int</span> fy = <span class="hljs-built_in">find</span>(edge[i].v);<br>            <span class="hljs-keyword">if</span> (fx != fy)<br>            &#123;<br>                bin[fy] = fx;<br>                cur += edge[i].val;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, cur);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>scnu-ACM-class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习</title>
    <link href="/2020/05/06/TS%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/05/06/TS%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/typescript.jpg" alt="" /></p><p>本文是通过学习B站一个up主<a href="https://space.bilibili.com/165659472?spm_id_from=333.788.b_765f7570696e666f.1">技术胖</a>的视频而记录下的学习过程。</p><p>从面向对象开始的教程因为学过了（<code>懒</code>），所以找了技术胖<a href="https://www.jspang.com/detailed?id=38#toc354">博客</a>来作为学习资料。</p><p>好吧，这个堪称<code>TypeScript</code>的超入门教程，一天时间可以过完。</p><span id="more"></span><h2 id="变量类型"><a class="markdownIt-Anchor" href="#变量类型"></a> 变量类型</h2><p><code>TypeScript</code>最大的一个特点就是变量是强类型的，也就是说在声明变量时，我们必须给他定义一个类型。</p><p>TypeScript中的数据类型有：</p><div class="hljs code-wrapper"><pre><code>Undefined :Number:数值类型;string : 字符串类型;Boolean: 布尔类型；enum：枚举类型；any : 任意类型，一个牛X的类型；void：空类型；Array : 数组类型;Tuple : 元祖类型；Null ：空类型。</code></pre></div><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//在js中当你定义了一个变量，但没有给它赋予任何值的时候，它就是Undefined类型。</span><br><span class="hljs-keyword">var</span> age:<span class="hljs-built_in">number</span><br><span class="hljs-built_in">console</span>.log(age)<br><br><span class="hljs-comment">//Number 可用于表示整数或浮点数</span><br><span class="hljs-comment">//Infinity:正无穷大</span><br><span class="hljs-comment">//-Infinity:负无穷大</span><br><span class="hljs-comment">//NaN:它是Not a Number 的简写，意思就是不是一个数值。如果一个计算结果或者函数的返回值本应该是数值，但是由于种种原因，他不是数字。出现这种状况不会报错，而是把它的结果看成了NaN。</span><br><span class="hljs-keyword">var</span> age:<span class="hljs-built_in">number</span> = <span class="hljs-number">18</span><br><span class="hljs-keyword">var</span> stature:<span class="hljs-built_in">number</span> = <span class="hljs-number">178.5</span><br><span class="hljs-keyword">var</span> special:<span class="hljs-built_in">number</span> = <span class="hljs-literal">NaN</span>  <br><br><span class="hljs-built_in">console</span>.log(age)<br><span class="hljs-built_in">console</span>.log(stature)<br><span class="hljs-built_in">console</span>.log(special)<br><br><span class="hljs-comment">//string 单双引号都可以使用</span><br><span class="hljs-keyword">var</span> text:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;what not have a try?&quot;</span><br><br><span class="hljs-built_in">console</span>.log(text)<br><br><span class="hljs-comment">//boolean</span><br><span class="hljs-keyword">var</span> b:<span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> c:<span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">//enum 枚举类型     人：男人，女人，中性；  四季</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;---------------------&quot;</span>)<br><span class="hljs-built_in">enum</span> REN&#123;man = <span class="hljs-string">&quot;男人&quot;</span>,woman = <span class="hljs-string">&quot;女人&quot;</span>,what = <span class="hljs-string">&quot;中性&quot;</span>&#125;<br><span class="hljs-built_in">console</span>.log(REN.what)<br><br><span class="hljs-comment">//any 万能类型</span><br><span class="hljs-keyword">var</span> t:<span class="hljs-built_in">any</span> = <span class="hljs-number">100</span><br>t = <span class="hljs-string">&quot;how&quot;</span><br>t = <span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.log(t)<br><br><span class="hljs-comment">//null 表示引用类型为空</span><br></code></pre></div></td></tr></table></figure><h2 id="typescript的函数"><a class="markdownIt-Anchor" href="#typescript的函数"></a> TypeScript的函数</h2><p>需要注意的是：</p><ul><li>声明（定义）函数必须加 function 关键字；</li><li>函数名与变量名一样，命名规则按照标识符规则；</li><li>函数参数可有可无，多个参数之间用逗号隔开；</li><li>每个参数参数由名字与类型组成，之间用分号隔开；</li><li>函数的返回值可有可无，没有时，返回类型为 void；</li><li>大括号中是函数体。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">age:<span class="hljs-built_in">number</span></span>):<span class="hljs-title">string</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;找到了&#x27;</span> + age + <span class="hljs-string">&#x27;岁的学生&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> age:<span class="hljs-built_in">number</span> = <span class="hljs-number">18</span><br><span class="hljs-keyword">var</span> result:<span class="hljs-built_in">string</span> = search(age)<br><span class="hljs-built_in">console</span>.log(result)<br><br><span class="hljs-comment">//有可选参数的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">age:<span class="hljs-built_in">number</span>,stature?:<span class="hljs-built_in">string</span></span>):<span class="hljs-title">string</span></span>&#123;<br>    <span class="hljs-keyword">let</span> yy:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;&quot;</span><br>    yy = <span class="hljs-string">&#x27;找到了&#x27;</span> + age + <span class="hljs-string">&#x27;岁&#x27;</span><br>    <span class="hljs-keyword">if</span>(stature!=<span class="hljs-literal">undefined</span>)&#123;<br>        yy += stature<br>    &#125;<br>    <span class="hljs-keyword">return</span> yy + <span class="hljs-string">&#x27;的学生&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> result:<span class="hljs-built_in">string</span> = search(<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;快乐的&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(result)<br><br><span class="hljs-comment">//有默认参数的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">age:<span class="hljs-built_in">number</span>=<span class="hljs-number">18</span>,stature:<span class="hljs-built_in">string</span>=<span class="hljs-string">&#x27;很高的&#x27;</span></span>):<span class="hljs-title">string</span></span>&#123;<br>    <span class="hljs-keyword">let</span> yy:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;&quot;</span><br>    yy = <span class="hljs-string">&#x27;找到了&#x27;</span> + age + <span class="hljs-string">&#x27;岁&#x27;</span><br>    <span class="hljs-keyword">if</span>(stature!=<span class="hljs-literal">undefined</span>)&#123;<br>        yy += stature<br>    &#125;<br>    <span class="hljs-keyword">return</span> yy + <span class="hljs-string">&#x27;的学生&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> result:<span class="hljs-built_in">string</span> = search(<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;快乐的&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(result)<br><br><span class="hljs-comment">//有剩余参数的函数   需求不确定</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">...xuqiu:<span class="hljs-built_in">string</span>[]</span>):<span class="hljs-title">string</span></span>&#123;<br>    <span class="hljs-keyword">let</span> yy:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;找到了&quot;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;xuqiu.length;++i)&#123;<br>        yy += xuqiu[i]<br>        <span class="hljs-keyword">if</span>(i&lt;xuqiu.length-<span class="hljs-number">1</span>)&#123;<br>            yy += <span class="hljs-string">&#x27;,&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> yy + <span class="hljs-string">&#x27;的学生&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> result:<span class="hljs-built_in">string</span> = search(<span class="hljs-string">&#x27;22岁&#x27;</span>,<span class="hljs-string">&#x27;快乐的&#x27;</span>,<span class="hljs-string">&#x27;无忧的&#x27;</span>,<span class="hljs-string">&#x27;傻傻的&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></div></td></tr></table></figure><h2 id="三种函数的定义"><a class="markdownIt-Anchor" href="#三种函数的定义"></a> 三种函数的定义</h2><ul><li>函数声明法<ul><li>函数声明法创建函数是最常用的函数定义法。使用function关键字和函数名去定义一个函数。</li></ul></li><li>函数表达式法<ul><li>函数表达式法是将一个函数赋值给一个变量，这个变量名就是函数名。通过变量名就可以调用函数了。这种方式定义的函数，必须在定义之后，调用函数。下面例子中等号右边的函数没有函数名，称为匿名函数。</li></ul></li><li>箭头函数<ul><li>箭头函数是 ES6 中新增的函数定义的新方式，我们的 TypeScript 语言是完全支持 ES6 语法的。箭头函数定义的函数一般都用于回调函数中。</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typeScript"><span class="hljs-comment">//函数声明法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">n1:<span class="hljs-built_in">number</span>,n2:<span class="hljs-built_in">number</span></span>):<span class="hljs-title">number</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2<br>&#125;<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><br><span class="hljs-comment">//函数表达式法</span><br><span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n1:<span class="hljs-built_in">number</span>,n2:<span class="hljs-built_in">number</span></span>):<span class="hljs-title">number</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2<br>&#125;<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br><br><span class="hljs-comment">//箭头函数 ES6</span><br><span class="hljs-keyword">var</span> add = (n1:<span class="hljs-built_in">number</span>,<span class="hljs-attr">n2</span>:<span class="hljs-built_in">number</span>):<span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> n1+n2<br>&#125;<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br></code></pre></div></td></tr></table></figure><h2 id="函数中变量的作用域"><a class="markdownIt-Anchor" href="#函数中变量的作用域"></a> 函数中变量的作用域</h2><blockquote><p>每个变量都有一个起作用的范围，这个范围就是变量的作用域。在TypeScript语言中变量作用域划分是以函数为标准的。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-comment">//变量的作用域，依据函数划分</span><br><br><span class="hljs-comment">//局部变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br>    <span class="hljs-keyword">var</span> thing:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cat&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(thing)<br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(thing) 会报错，thing作用域只在change函数中<br><br><span class="hljs-comment">//全局变量 </span><br><span class="hljs-keyword">var</span> thing:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cat&#x27;</span><br><span class="hljs-built_in">console</span>.log(thing)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br>    thing = <span class="hljs-string">&#x27;dog&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(thing)<br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(thing)<br><br><span class="hljs-comment">//let关键字 </span><br><br>使用<span class="hljs-keyword">let</span>关键字的变量就是一个块级作用域变量<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br>    <span class="hljs-keyword">var</span> thinga:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cat&#x27;</span><br>    &#123;<br>        <span class="hljs-keyword">let</span> thingb:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;dog&#x27;</span><br>        <span class="hljs-built_in">console</span>.log(thingb)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(thinga)<br>    <span class="hljs-comment">//console.log(thingb) 会报错</span><br>&#125;<br>change()<br></code></pre></div></td></tr></table></figure><p>当局部变量与全局变量重名的时候，在函数体内是局部变量起作用；当内部声明了和全局的变量同名时，就会出现变量提升的效果，声明语句会提升到函数的第一句。<strong>[坑]</strong></p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">var</span> yangzi:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;刘德华&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zhengXing</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;技术胖整形成了&#x27;</span>+yangzi+<span class="hljs-string">&#x27;的样子&#x27;</span>)<br>    <span class="hljs-keyword">var</span> yangzi:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;马德华&#x27;</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;技术胖整形成了&#x27;</span>+yangzi+<span class="hljs-string">&#x27;的样子&#x27;</span>)<br>&#125;<br>zhengXing()<br><span class="hljs-built_in">console</span>.log(yangzi)<br></code></pre></div></td></tr></table></figure><blockquote><p>技术胖整形成了undefined的样子</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">var</span> yangzi:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;刘德华&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zhengXing</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br>    <span class="hljs-keyword">var</span>  yangzi:<span class="hljs-built_in">string</span> <br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;技术胖整形成了&#x27;</span>+yangzi+<span class="hljs-string">&#x27;的样子&#x27;</span>)<br>    yangzi = <span class="hljs-string">&#x27;马德华&#x27;</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;技术胖整形成了&#x27;</span>+yangzi+<span class="hljs-string">&#x27;的样子&#x27;</span>)<br>&#125;<br>zhengXing()<br><span class="hljs-built_in">console</span>.log(yangzi)<br></code></pre></div></td></tr></table></figure><h2 id="引用类型-数组"><a class="markdownIt-Anchor" href="#引用类型-数组"></a> 引用类型-数组</h2><blockquote><p>引用类型有Array(数组)，String(字符串)，Date(日期对象)，RegExp(正则表达式)等。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-comment">//初始化数组的两种方法</span><br><span class="hljs-keyword">let</span> arr1:<span class="hljs-built_in">number</span>[]    <span class="hljs-comment">//声明一个数值类型的数组</span><br><span class="hljs-keyword">let</span> arr2:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">string</span>&gt;  <span class="hljs-comment">//声明一个字符串类型的数组</span><br><br><span class="hljs-comment">//字面量赋值法</span><br><span class="hljs-keyword">let</span> arr1:<span class="hljs-built_in">number</span>[] = []<br><span class="hljs-keyword">let</span> arr2:<span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr3:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = [<span class="hljs-string">&#x27;what&#x27;</span>,<span class="hljs-string">&#x27;什么&#x27;</span>]<br><span class="hljs-keyword">let</span> arr4:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">boolean</span>&gt; = [<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>]<br><br><span class="hljs-comment">//构造函数赋值法</span><br><span class="hljs-keyword">let</span> arr1:<span class="hljs-built_in">number</span>[] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()<br><span class="hljs-keyword">let</span> arr2:<span class="hljs-built_in">number</span>[] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-keyword">let</span> arr3:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&#x27;what&#x27;</span>,<span class="hljs-string">&#x27;什么&#x27;</span>)<br><span class="hljs-keyword">let</span> arr4:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">boolean</span>&gt; = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>)<br><br><span class="hljs-comment">//let arr5:number[] = [1,2,true]    会报错</span><br><br><span class="hljs-comment">//元组  有顺序的 一种特殊的数组</span><br><span class="hljs-keyword">let</span> x :[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>]<br>x=[<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">10</span>]<br></code></pre></div></td></tr></table></figure><h2 id="引用类型-字符串"><a class="markdownIt-Anchor" href="#引用类型-字符串"></a> 引用类型-字符串</h2><blockquote><p>TypeScript中字符串的两种类型</p></blockquote><ul><li>基本类型字符串：由单引号或者双引号括起来的一串字符串。</li><li>引用类型字符串：用new 实例化的 String类型。</li></ul><blockquote><p>有了引用类型的字符串就可以给字符串增加一系列方法了。</p></blockquote><p>eg:</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> jspang:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;技术胖&#x27;</span><br><span class="hljs-keyword">let</span> jspanga:<span class="hljs-built_in">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;jspang.com&quot;</span>)<br><span class="hljs-built_in">console</span>.log(jspang)<br><span class="hljs-built_in">console</span>.log(jspanga)<br></code></pre></div></td></tr></table></figure><p>result:</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript">技术胖<br>[<span class="hljs-built_in">String</span>: <span class="hljs-string">&#x27;jspang.com&#x27;</span>]<br></code></pre></div></td></tr></table></figure><blockquote><p>基本类型的字符串可以直接使用引用类型的属性和方法。</p></blockquote><h3 id="字符串的长度"><a class="markdownIt-Anchor" href="#字符串的长度"></a> 字符串的长度</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> jspang:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;技术胖&#x27;</span><br><span class="hljs-keyword">let</span> jspanga:<span class="hljs-built_in">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;jspang.com&quot;</span>)<br><span class="hljs-built_in">console</span>.log(jspang.length)<br><span class="hljs-built_in">console</span>.log(jspanga.length)<br></code></pre></div></td></tr></table></figure><h3 id="字符串常用的方法"><a class="markdownIt-Anchor" href="#字符串常用的方法"></a> 字符串常用的方法</h3><h4 id="查找字符串"><a class="markdownIt-Anchor" href="#查找字符串"></a> 查找字符串</h4><p>从头部查找字符串直接使用indexOf就可以了。</p><p>基本语法：<code>str.indexOf(subStr)</code></p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> something:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;清早起来打开窗，心情美美的，我要出去找小姐姐，心情美美的。&quot;</span><br><span class="hljs-keyword">let</span> xiaoJieJie:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;小姐姐&quot;</span><br><span class="hljs-built_in">console</span>.log(something.indexOf(xiaoJieJie))   <span class="hljs-comment">//19</span><br></code></pre></div></td></tr></table></figure><p>如果我们查找的字符串没有找到，则返回-1。</p><p>从字符串尾部开始查找字符串的位置，使用<code>lastIndexOf(subStr)</code></p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> something:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;清早起来打开窗，心情美美的，我要出去找小姐姐，心情美美的。&quot;</span><br><span class="hljs-keyword">let</span> xiaoJieJie:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;小姐姐&quot;</span><br><span class="hljs-built_in">console</span>.log(something.lastIndexOf(xiaoJieJie)) <span class="hljs-comment">//19</span><br></code></pre></div></td></tr></table></figure><p>需要注意的是，返回的都是字符串的下标。所以返回的值是相同的。并不是返回从后到前的下标位置。</p><h4 id="截取字符串"><a class="markdownIt-Anchor" href="#截取字符串"></a> 截取字符串</h4><blockquote><p>基本语法为：<code>str.substring(startIndex,[endIndex])</code></p></blockquote><blockquote><p>参数 startIndex 表示开始下标，endIndex 表示结束下标，endIndex 参数是可选的。</p></blockquote><blockquote><p>该方法的作用是从指定的开始下标开始截取字符串，截取到 endIndex 的下标之前，如果没有 endIndex，则截取到字符串结束。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> something:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;清早起来打开窗，心情美美的，我要出去找小姐姐，心情美美的。&quot;</span><br><span class="hljs-keyword">let</span> xiaoJieJie:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;小姐姐&quot;</span><br><span class="hljs-built_in">console</span>.log(something.substring(<span class="hljs-number">8</span>)) 心情美美的，我要出去找小姐姐，心情美美的。<br><span class="hljs-built_in">console</span>.log(something.substring(<span class="hljs-number">8</span>,<span class="hljs-number">14</span>))  心情美美的，<br></code></pre></div></td></tr></table></figure><h4 id="替换字符串"><a class="markdownIt-Anchor" href="#替换字符串"></a> 替换字符串</h4><blockquote><p>基本语法为：<code>str.replace(subStr,newstr)</code></p></blockquote><blockquote><p>substr 表示被替换的子串，newstr 表示要替换成的子串。</p></blockquote><blockquote><p>该方法的作用是在 str 中从头部开始找 substr 子串，找到之后，把 substr 用 newstr 替换掉。需要注意的是如果 str 中有多个 substr 子串，只有第一个 substr 子串会被替换掉。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> something:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;清早起来打开窗，心情美美的，我要出去找小姐姐，心情美美的。&quot;</span><br><span class="hljs-keyword">let</span> xiaoJieJie:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;小姐姐&quot;</span><br><span class="hljs-built_in">console</span>.log(something.replace(xiaoJieJie,<span class="hljs-string">&#x27;小哥哥&#x27;</span>))<br></code></pre></div></td></tr></table></figure><h2 id="引用类型-日期对象"><a class="markdownIt-Anchor" href="#引用类型-日期对象"></a> 引用类型-日期对象</h2><p>创建日期对象</p><p>日期对象是Date的实例，可以使用构造函数的方法进行创建。并且构造函数中可以传递多种类型的参数。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//不传递任何参数</span><br><span class="hljs-built_in">Date</span>()构造函数将根据当前日期和时间创建一个<span class="hljs-built_in">Date</span>对象。但不一定是中国时区。<br><br><span class="hljs-keyword">let</span> d:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-built_in">console</span>.log(d)<br><br><span class="hljs-comment">//传递一个整数，这个整数代表的是距离1970-01-01 00:00:00的毫秒数</span><br><span class="hljs-keyword">let</span> d1:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">let</span> d2:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2000</span>)<br><span class="hljs-built_in">console</span>.log(d1) <span class="hljs-comment">//1970-01-01T00:00:01.000Z</span><br><span class="hljs-built_in">console</span>.log(d2) <span class="hljs-comment">//1970-01-01T00:00:02.000Z</span><br><br><span class="hljs-comment">//传递一个字符串</span><br>如果传递一个表示日期的字符串，就会生成相对应的日期对象。字符串的格式常用:yyyy/MM/dd hh:mm:ss，yyyy-MM-dd hh:mm:ss，yyyy-MM-ddThh:mm:ss等。<br><span class="hljs-keyword">let</span> d1:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2018/09/06 05:30:00&#x27;</span>)<br><span class="hljs-keyword">let</span> d2:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2018-09-06 05:30:00&#x27;</span>)<br><span class="hljs-keyword">let</span> d3:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2018-09-06T05:30:00&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(d1)<br><span class="hljs-built_in">console</span>.log(d2)<br><span class="hljs-built_in">console</span>.log(d3)<br><br><span class="hljs-comment">//传递表示年月日时分秒的变量</span><br><span class="hljs-keyword">let</span> d:<span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(year,month,day,hours,minutes,seconds,ms);<br></code></pre></div></td></tr></table></figure><ul><li>year 表示年份，4位数字。</li><li>month表示月份，数值是0(1月)~11(12月)之间的整数。</li><li>day 表示日期。数值是1~31之间的整数。</li><li>hours 表示小时，数值是0-23之间的整数。</li><li>minutes 表示分钟数，数值是0~59之间的整数。</li><li>seconds 表示秒数，数值是0~59之间的整数。</li><li>ms 表示毫秒数，数值是0~999之间的整数。</li></ul><h2 id="引用类型-正则表达式"><a class="markdownIt-Anchor" href="#引用类型-正则表达式"></a> 引用类型-正则表达式</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//RegExp      string</span><br><br><span class="hljs-comment">//构造函数声明法        采用new关键字 可传一个或多个参数</span><br><span class="hljs-comment">//一个是字符串描述，另一个是修饰符。</span><br><span class="hljs-comment">//比如g是全局修饰符，i是忽略大小写，m是多行模式。</span><br><span class="hljs-keyword">let</span> reg1: <span class="hljs-built_in">RegExp</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;kok-s0s&quot;</span>)     <span class="hljs-comment">//表示字符串规则里含有kok-s0s</span><br><span class="hljs-built_in">console</span>.log(reg1)<br><span class="hljs-keyword">let</span> reg2: <span class="hljs-built_in">RegExp</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;kok-s0s&quot;</span>, <span class="hljs-string">&#x27;gi&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(reg2)<br><br><span class="hljs-comment">//字面量声明法</span><br><span class="hljs-keyword">let</span> reg3:<span class="hljs-built_in">RegExp</span> = <span class="hljs-regexp">/kok-s0s/</span><br><span class="hljs-keyword">let</span> reg4: <span class="hljs-built_in">RegExp</span> = <span class="hljs-regexp">/kok-s0s/gi</span><br><br><span class="hljs-comment">//test(string)    </span><br><span class="hljs-keyword">let</span> reg1:<span class="hljs-built_in">RegExp</span> = <span class="hljs-regexp">/kok-s0s/</span><br><span class="hljs-keyword">let</span> website:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;kok-s0s.github.io&#x27;</span><br><span class="hljs-keyword">let</span> res:<span class="hljs-built_in">boolean</span> = reg1.test(website)<br><span class="hljs-built_in">console</span>.log(res)<br><br><span class="hljs-comment">//exec(string)</span><br><span class="hljs-keyword">let</span> reg1: <span class="hljs-built_in">RegExp</span> = <span class="hljs-regexp">/kok-s0s/</span><br><span class="hljs-keyword">let</span> website: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;kok-s0s.github.io&#x27;</span><br><span class="hljs-keyword">let</span> res: <span class="hljs-built_in">boolean</span> = reg1.test(website)<br><span class="hljs-built_in">console</span>.log(reg1.exec(website))<br></code></pre></div></td></tr></table></figure><blockquote><p>RegExp中的常用方法<br />RegExp对象包含两个方法：test( )和exec( ),功能基本相似，用于测试字符串匹配。</p></blockquote><ul><li><code>test(string)</code> ：在字符串中查找是否存在指定的正则表达式并返回布尔值，如果存在则返回 <code>true</code>，不存在则返回 <code>false</code>。</li><li><code>exec(string)</code> : 用于在字符串中查找指定正则表达式，如果 <code>exec()</code> 方法执行成功，则返回包含该查找字符串的相关信息数组。如果执行失败，则返回 <code>null</code>。</li></ul><p>更过关于正则表达式的内容，参考该<a href="https://www.runoob.com/regexp/regexp-tutorial.html">链接</a></p><h2 id="面向对象编程-类的声明和使用"><a class="markdownIt-Anchor" href="#面向对象编程-类的声明和使用"></a> 面向对象编程-类的声明和使用</h2><blockquote><p>类是对象具体事物的一个抽象，对象时类的具体表现</p></blockquote><blockquote><p>类的定义</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span><br>    <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>        <span class="hljs-built_in">this</span>.age = age<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello!&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> lady:People = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;kok-s0s&#x27;</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">console</span>.log(lady)<br>lady.say()<br></code></pre></div></td></tr></table></figure><h2 id="面向对象编程-修饰符"><a class="markdownIt-Anchor" href="#面向对象编程-修饰符"></a> 面向对象编程-修饰符</h2><blockquote><p>TypeScript语言和Java还有C#很像（因为我只会这两个面向对象的语言），类中属性的访问可以用访问修饰符来进行限制。访问修饰符分为：public、protected、private。</p></blockquote><ul><li>public:公有修饰符，可以在类内或者类外使用public修饰的属性或者行为，默认修饰符。</li><li>protected:受保护的修饰符，可以本类和子类中使用protected修饰的属性和行为。</li><li>private : 私有修饰符，只可以在类内使用private修饰的属性和行为。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> sex: <span class="hljs-built_in">string</span><br>    <span class="hljs-keyword">protected</span> name: <span class="hljs-built_in">string</span><br>    <span class="hljs-keyword">private</span> age: <span class="hljs-built_in">number</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">sex:<span class="hljs-built_in">string</span>,name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex<br>        <span class="hljs-built_in">this</span>.name = name<br>        <span class="hljs-built_in">this</span>.age = age<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-title">saygood</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;well done!&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> lady:People = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;斋藤飞鸟&#x27;</span>,<span class="hljs-number">19</span>)<br><br><span class="hljs-built_in">console</span>.log(lady)<br><span class="hljs-built_in">console</span>.log(lady.sex)<br><span class="hljs-comment">// console.log(lady.name)   报错</span><br><span class="hljs-comment">// console.log(lady.age)    报错</span><br>lady.sayhello()<br><span class="hljs-comment">// lady.saygood()           报错</span><br></code></pre></div></td></tr></table></figure><blockquote><p>使用readonly修饰符将属性设置为只读，只读属性必须在生命时或者构造函数里被初始化（注意）。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//只读修饰符 readonly</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> sex:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> man:Man = <span class="hljs-keyword">new</span> Man()<br><span class="hljs-built_in">console</span>.log(man.sex)<br><span class="hljs-comment">// man.sex = &#x27;女&#x27;  会报错，无法修改</span><br></code></pre></div></td></tr></table></figure><h2 id="面向对象编程-继承和重写"><a class="markdownIt-Anchor" href="#面向对象编程-继承和重写"></a> 面向对象编程-继承和重写</h2><h3 id="类的继承"><a class="markdownIt-Anchor" href="#类的继承"></a> 类的继承</h3><p>在使用TypeScript这门语言时，一个最重要基本功就是面向对象编程，那对类的扩展就变的格外重要，扩展经常使用的手段就是继承。</p><blockquote><p>继承：允许我们创建一个类（子类），从已有的类（父类）上继承所有的属性和方法，子类可以新建父类中没有的属性和方法。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jspang</span></span>&#123;<br>    <span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span><br>    <span class="hljs-keyword">public</span> age : <span class="hljs-built_in">number</span><br>    <span class="hljs-keyword">public</span> skill: <span class="hljs-built_in">string</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span>,skill:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>        <span class="hljs-built_in">this</span>.age = age<br>        <span class="hljs-built_in">this</span>.skill = skill<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">interest</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;找小姐姐&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> jspangObj:Jspang = <span class="hljs-keyword">new</span> Jspang(<span class="hljs-string">&#x27;技术胖&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;web&#x27;</span>)<br>jspangObj.interest()<br></code></pre></div></td></tr></table></figure><blockquote><p>子类实现 <code>extends</code>关键字就是继承的重点,但是<code>TypeScript</code>不支持多重继承。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsShuai</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Jspang</span></span>&#123;<br>    <span class="hljs-keyword">public</span> xingxiang:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;帅气&#x27;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">zhuangQian</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;一天赚了一个亿&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> shuai = <span class="hljs-keyword">new</span> JsShuai(<span class="hljs-string">&quot;技术帅&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;演讲&#x27;</span>)<br>shuai.interest()<br>shuai.zhuangQian()<br></code></pre></div></td></tr></table></figure><h3 id="类方法的重写"><a class="markdownIt-Anchor" href="#类方法的重写"></a> 类方法的重写</h3><blockquote><p>重写就是在子类中重写父类的方法。提供更多种可能性。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsShuai</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Jspang</span></span>&#123;<br>    <span class="hljs-keyword">public</span> xingxiang:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;帅气&#x27;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">interest</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>.interest()<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;建立电商平台&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">zhuangQian</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;一天赚了一个亿&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>先是继承了父类的方法，然后通过super关键字调用了父类的方法，实现了技能的增加。</p></blockquote><h2 id="面向对象编程-接口"><a class="markdownIt-Anchor" href="#面向对象编程-接口"></a> 面向对象编程-接口</h2><p>在通常情况下，接口是用来定义一些规范，使用这些接口，就必须实现按照接口中的规范来走。</p><blockquote><p>在面向对象的语言中，术语interface经常被用来定义一个不包含数据和逻辑代码但是用来签名定义了行为的抽象类型。</p></blockquote><h3 id="认识接口"><a class="markdownIt-Anchor" href="#认识接口"></a> 认识接口</h3><p>定义接口的关键字是<code>interface</code>。我们现在就来定义一个接口，这个接口是用来规范丈夫的。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Husband &#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-built_in">string</span><br>    <span class="hljs-attr">interest</span>:<span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">let</span> myhusband:Husband =&#123; <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-attr">interest</span>:<span class="hljs-string">&#x27;看书、作家务&#x27;</span>&#125;<br><span class="hljs-built_in">console</span>.log(myhusband)<br></code></pre></div></td></tr></table></figure><h3 id="可选参数的接口"><a class="markdownIt-Anchor" href="#可选参数的接口"></a> 可选参数的接口</h3><p>对老公的标准如果我们有一些可选项，这些并不是都需要显示出来的，在有些情况下，我们只需要传入部分参数。我们可以使用问好的形式来设置可选参数。</p><p>比如现在我们还希望老公的标准，有一条是给我“买包包”，但是这个是隐喻的，不是直接显示出来的。我们修改我们的接口。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Husband &#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-built_in">string</span><br>    <span class="hljs-attr">interest</span>:<span class="hljs-built_in">string</span><br>    maiBaoBao?:<span class="hljs-built_in">Boolean</span><br>&#125;<br><span class="hljs-keyword">let</span> myhusband:Husband =&#123; <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-attr">interest</span>:<span class="hljs-string">&#x27;看书、作家务&#x27;</span>,<span class="hljs-attr">maiBaoBao</span>:<span class="hljs-literal">true</span>&#125;<br><span class="hljs-built_in">console</span>.log(myhusband)<br></code></pre></div></td></tr></table></figure><p>上面的代码maiBaoBao选项就是可选的，可以写也可以不写。</p><h3 id="规范函数类型接口"><a class="markdownIt-Anchor" href="#规范函数类型接口"></a> 规范函数类型接口</h3><p>我们还可以使用接口来规范函数类型的接口，比如现在要找老公这件事，我们规定有一些资源，然后我们需要哪些资源，在函数中进行匹配，最后返回是否匹配成功。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span>  SearchMan&#123;<br>    (source:<span class="hljs-built_in">string</span>,<span class="hljs-attr">subString</span>:<span class="hljs-built_in">string</span>):<span class="hljs-built_in">boolean</span><br>&#125;<br><br><span class="hljs-keyword">let</span> mySearch:SearchMan<br><br>mySearch = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">source:<span class="hljs-built_in">string</span>,subString:<span class="hljs-built_in">string</span></span>):<span class="hljs-title">boolean</span></span>&#123;<br>    <span class="hljs-keyword">let</span> flag =source.search(subString)<br>    <span class="hljs-keyword">return</span> (flag != -<span class="hljs-number">1</span>)<br>&#125; <br><br><span class="hljs-built_in">console</span>.log(mySearch(<span class="hljs-string">&#x27;高、富、帅、德&#x27;</span>,<span class="hljs-string">&#x27;胖&#x27;</span>)) <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><blockquote><p>接口可以规范类</p></blockquote><h2 id="面向对象编程-命名空间"><a class="markdownIt-Anchor" href="#面向对象编程-命名空间"></a> 面向对象编程-命名空间</h2><p>在制作大型应用的时候，为了让程序更加有层次感和变量之间不互相干扰，我们可以使用命名空间来构建程序。举个小例子：比如“德华”这件事，帅哥也有叫德华的，二师兄也有叫德华的。那我们要如何区分那。这对于女孩子选老公来说非常重要啊。</p><p>当然命名空间就是解决这个问题的，命名空间，又称内部模块，被用于组织有些具有内在联系的特性和对象。我们来看一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> shuaiGe&#123;<br>    <span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dehua</span></span>&#123;<br>        <span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;刘德华&#x27;</span><br>        <span class="hljs-function"><span class="hljs-title">talk</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是帅哥刘德华&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> bajie&#123;<br>    <span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dehua</span></span>&#123;<br>        <span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;马德华&#x27;</span><br>        <span class="hljs-function"><span class="hljs-title">talk</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是二师兄马德华&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> dehua1:shuaiGe.Dehua = <span class="hljs-keyword">new</span> shuaiGe.Dehua()<br><span class="hljs-keyword">let</span> dehua2:bajie.Dehua = <span class="hljs-keyword">new</span> bajie.Dehua()<br>dehua1.talk()<br>dehua2.talk()<br><br>我是帅哥刘德华<br>我是二师兄马德华<br></code></pre></div></td></tr></table></figure><hr /><p>按照这个视频的说法，我是该去学些<code>ES6</code>的知识了。</p><p><strong>⚔🏹(　o=^•ェ•)o　┏━┓</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript和js的区别</title>
    <link href="/2020/05/03/TypeScript%E5%92%8Cjs%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/05/03/TypeScript%E5%92%8Cjs%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Diff</p></blockquote><span id="more"></span><p>TypeScript</p><ul><li><p>带有类型JavaScript超集</p><ul><li>100%兼容JavaScript代码，无需修改平滑迁移</li><li>为构建大型应用而生，小型程序也同样适用</li><li>生态圈广泛支持，开源项目的新选择</li></ul></li><li><p>扩展的JavaScript</p><ul><li>所有JS代码，对象，库可用于TS</li><li>强大的类型系统，静态类型检查能力</li><li>丰富的class扩展功能（和Java基本一样）</li><li>添加了系统级设计能力</li></ul></li><li><p>静态类型语言</p><table><thead><tr><th style="text-align:center">JavaScript</th><th style="text-align:center">TypeScript</th></tr></thead><tbody><tr><td style="text-align:center">运行时类型</td><td style="text-align:center">静态类型</td></tr><tr><td style="text-align:center">程序运行时类型检查</td><td style="text-align:center">编译期类型检查</td></tr><tr><td style="text-align:center">开发环境无法提供帮助</td><td style="text-align:center">开发环境能提供丰富的信息</td></tr><tr><td style="text-align:center">需要大量测试，保证代码覆盖率</td><td style="text-align:center">大部分检查由语言自身完成</td></tr></tbody></table></li><li><p>增强的class</p><table><thead><tr><th style="text-align:center">JavaScript</th><th style="text-align:center">TypeScript</th></tr></thead><tbody><tr><td style="text-align:center"><strong>最基本的class支持</strong></td><td style="text-align:center"><strong>完整的class支持</strong></td></tr><tr><td style="text-align:center">仅高级浏览器兼容</td><td style="text-align:center">所有浏览器支持</td></tr><tr><td style="text-align:center">五访问控制</td><td style="text-align:center">完整的成员访问控制</td></tr><tr><td style="text-align:center">无高级特性</td><td style="text-align:center">静态成员，只读成语等特性</td></tr></tbody></table></li><li><p>系统级设计能力</p><table><thead><tr><th style="text-align:center">JavaScript</th><th style="text-align:center">TypeScript</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">完备的系统设计能力</td></tr><tr><td style="text-align:center">文档，注释</td><td style="text-align:center">interface接口规范</td></tr><tr><td style="text-align:center">人力控制</td><td style="text-align:center">abstract抽象类</td></tr><tr><td style="text-align:center">加强入职培训</td><td style="text-align:center">。。。。。。</td></tr></tbody></table></li><li><p>众多大型框架支持</p><ul><li>React</li><li>Vue.js</li><li>ANGULAR</li><li>node.js</li><li>jQuery</li><li>webpack</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Suspects</title>
    <link href="/2020/04/16/The-Suspects/"/>
    <url>/2020/04/16/The-Suspects/</url>
    
    <content type="html"><![CDATA[<blockquote><p>并查集</p></blockquote><span id="more"></span><p><a href="https://www.cnblogs.com/yym2013/p/3845448.html">Question</a></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">int</span> par[<span class="hljs-number">30010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==par[x])<br><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">return</span> par[x]=<span class="hljs-built_in">find</span>(par[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WeightUnion</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> ix=<span class="hljs-built_in">find</span>(x);<br><span class="hljs-keyword">int</span> iy=<span class="hljs-built_in">find</span>(y);<br><span class="hljs-keyword">if</span>(ix&lt;iy)<br>par[iy]=ix;<br><span class="hljs-keyword">else</span><br>par[ix]=iy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N,M;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;N,&amp;M)!=EOF)<br>&#123;<br><span class="hljs-keyword">if</span>(N==<span class="hljs-number">0</span>&amp;&amp;M==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>par[i]=i;<br><span class="hljs-keyword">while</span>(M--)<br>&#123;<br><span class="hljs-keyword">int</span> k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br><span class="hljs-keyword">int</span> first,other;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;first);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k<span class="hljs-number">-1</span>;++i)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;other);<br><span class="hljs-built_in">WeightUnion</span>(first,other);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;N;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(<span class="hljs-number">0</span>)==<span class="hljs-built_in">find</span>(i))<br>ans++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br><span class="hljs-comment">//printf(&quot;%d\n&quot;,-par[find(0)]);</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QuickSort</title>
    <link href="/2020/04/10/QuickSort/"/>
    <url>/2020/04/10/QuickSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>算法导论学快排</p></blockquote><span id="more"></span><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>【算法导论描述】：快速排序在输入为n个数的数组，其最坏时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，不过快速排序仍是实际排序应用中最好的选择，它的平均性能很好，期望时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(nlgn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，而且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(nlgn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>中隐含的常数因子非常小，除此之外，快速排序很是一个能够进行原址排序的算法，不需要额外地申请空间，甚至在虚存环境也能很好地工作。</p><hr /><p>快速排序是采用分治策略的算法，有“分解”，”解决“，”合并“这三个过程，不过快速排序是进行原址排序的，因此不需要合并操作。</p><hr /><p>快排的关键点主要在于找那个划分点，你可以选择第一个，最后一个或者是随机选择一个作为划分点将数组划分为两个，一个小于等于划分点的值，另一个数组则反之。</p><hr /><h2 id="快排cc实现"><a class="markdownIt-Anchor" href="#快排cc实现"></a> 快排C/C++实现</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a,<span class="hljs-keyword">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp=a;<br>a=b;<br>b=tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span><span class="hljs-comment">//划分点选取最后一个</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x=A[R];<br><span class="hljs-keyword">int</span> i=L<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L;j&lt;=R<span class="hljs-number">-1</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(A[j]&lt;=x)&#123;<br>i++;<br><span class="hljs-built_in">swap</span>(A[i],A[j]);<br>&#125;<br>&#125;<br><span class="hljs-built_in">swap</span>(A[i+<span class="hljs-number">1</span>],A[R]);<br><span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> Left,<span class="hljs-keyword">int</span> Right)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(Left&lt;Right)<span class="hljs-comment">//数组只剩下一个不需要再划分了 </span><br>&#123;<br><span class="hljs-keyword">int</span> w=<span class="hljs-built_in">Partition</span>(A,Left,Right);<br><span class="hljs-built_in">QuickSort</span>(A,Left,w<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">QuickSort</span>(A,w+<span class="hljs-number">1</span>,Right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N); <br><span class="hljs-keyword">int</span> *A=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;A[i]);<br><span class="hljs-built_in">QuickSort</span>(A,<span class="hljs-number">0</span>,N<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,A[i]);<br>        <span class="hljs-keyword">if</span>(i!=N<span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><hr /><h2 id="快速排序的性能"><a class="markdownIt-Anchor" href="#快速排序的性能"></a> 快速排序的性能</h2><p>其性能（运行时间）取决于划分是否平衡，而平衡与否又主要依赖于用于划分的元素。如果划分是平衡的，那么快速排序算法性能与归并性能一样。如果划分是不平衡的，那么快速排序的性能会接近于插入排序。</p><hr /><p>最坏情况划分就是当输入数组是有序时，无论是递增还是递减，快速排序的时间复杂度此时都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因为上面的练习已知划分算法Partition的时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，所以当数组为有序时，QuickSort这个过程一共要去做n次的划分算法Partition，时间复杂度就会变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>了，不过当数组为有序时，插入排序的时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><hr /><p>最好情况划分</p><p>在可能的最平衡的划分中，Partition得到的两个子问题的规模都不大于n/2。这是因为其中一个子问题的规模为￥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌋</span></span></span></span>，而另一个子问题的规模为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil n/2\rceil-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。在这种情况下，快排整体的性能非常好。此时，算法运行时间的递归式为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=2T(n/2)+Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，在这个式子中，忽略了一些余项以及减一操作的影响。根据主定理的情况2（树的总代价均匀分布在树的所有层次上），该递归式的解为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=Θ(nlgn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。通过在每一层递归中都平衡地划分子数组，我们能得到一个渐进时间上更快地算法。</p><hr /><h2 id="快速排序的随机化版本"><a class="markdownIt-Anchor" href="#快速排序的随机化版本"></a> 快速排序的随机化版本</h2><p>C/C++版本</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a,<span class="hljs-keyword">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp=a;<br>a=b;<br>b=tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span><span class="hljs-comment">//划分点选取最后一个</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x=A[R];<br><span class="hljs-keyword">int</span> i=L<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L;j&lt;=R<span class="hljs-number">-1</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(A[j]&lt;=x)&#123;<br>i++;<br><span class="hljs-built_in">swap</span>(A[i],A[j]);<br>&#125;<br>&#125;<br><span class="hljs-built_in">swap</span>(A[i+<span class="hljs-number">1</span>],A[R]);<br><span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Randomized_Partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i=<span class="hljs-built_in">rand</span>()%(R-L+<span class="hljs-number">1</span>)+L;<br><span class="hljs-built_in">swap</span>(A[R],A[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Partition</span>(A,L,R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> Left,<span class="hljs-keyword">int</span> Right)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(Left&lt;Right)<span class="hljs-comment">//数组只剩下一个不需要再划分了 </span><br>&#123;<br><span class="hljs-keyword">int</span> w=<span class="hljs-built_in">Randomized_Partition</span>(A,Left,Right);<br><span class="hljs-built_in">QuickSort</span>(A,Left,w<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">QuickSort</span>(A,w+<span class="hljs-number">1</span>,Right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N); <br><span class="hljs-keyword">int</span> *A=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;A[i]);<br><span class="hljs-built_in">QuickSort</span>(A,<span class="hljs-number">0</span>,N<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,A[i]);<br>        <span class="hljs-keyword">if</span>(i!=N<span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>这个版本的效率真的远超没有随机化去划分的做法。</p><p><img src="/images/%E6%B5%8B%E8%AF%95.png" alt="" /></p><hr /><h2 id="求第k个小的数"><a class="markdownIt-Anchor" href="#求第k个小的数"></a> 求第k个小的数</h2><p>快排，递归一部分，直至找到指定第k个小的数。时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a,<span class="hljs-keyword">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp=a;<br>a=b;<br>b=tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x=A[R];<br><span class="hljs-keyword">int</span> i=L<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L;j&lt;=R<span class="hljs-number">-1</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(A[j]&lt;=x)&#123;<br>i++;<br><span class="hljs-built_in">swap</span>(A[i],A[j]);<br>&#125;<br>&#125;<br><span class="hljs-built_in">swap</span>(A[i+<span class="hljs-number">1</span>],A[R]);<br><span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Randomized_Partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i=<span class="hljs-built_in">rand</span>()%(R-L+<span class="hljs-number">1</span>)+L;<br><span class="hljs-built_in">swap</span>(A[R],A[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Partition</span>(A,L,R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> Left,<span class="hljs-keyword">int</span> Right,<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(Left&lt;=Right)<br>&#123;<br><span class="hljs-keyword">int</span> w=<span class="hljs-built_in">Randomized_Partition</span>(A,Left,Right);<br><span class="hljs-keyword">if</span>(w==k<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> A[w];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(w&gt;k<span class="hljs-number">-1</span>)<br><span class="hljs-built_in">QuickSort</span>(A,Left,w<span class="hljs-number">-1</span>,k);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">QuickSort</span>(A,w+<span class="hljs-number">1</span>,Right,k);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N,k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;N,&amp;k); <br><span class="hljs-keyword">int</span> *A=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;A[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">QuickSort</span>(A,<span class="hljs-number">0</span>,N<span class="hljs-number">-1</span>,k));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>SCNU-Algorithms2020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个有序序列的中位数</title>
    <link href="/2020/04/05/%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E5%BA%8F%E5%88%97%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <url>/2020/04/05/%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E5%BA%8F%E5%88%97%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>找好你自己的位置！</p></blockquote><span id="more"></span><p>思路写在了纸上，我太懒了，不想打一遍，直接贴图。</p><p><img src="/images/148379803414091259.jpg" alt="" /></p><p><img src="/images/621896208467166130.jpg" alt="" /></p><p><img src="/images/601575595174610323.jpg" alt="" /></p><p><img src="/images/659403098076428128.jpg" alt="" /></p><hr /><p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200405183356.png" alt="" /></p><p>老师给的题中的数据还要多做个处理就是在每一个数组最后再多加一个元素（数值为A[n-1]+1）,这样才能保证该function的正常使用。</p><hr /><p>直接贴代码</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">int</span> A[<span class="hljs-number">2500001</span>],B[<span class="hljs-number">2500001</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">median</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> B[],<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> c,p;<br>    c=(a+b<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>    p=(L+R)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(L&gt;R)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">median</span>(B,A,b,a,<span class="hljs-number">0</span>,b<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[p]&gt;=B[c-p<span class="hljs-number">-1</span>]&amp;&amp;A[p]&lt;=B[c-p])<br>        <span class="hljs-keyword">return</span> A[p];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[p]&lt;B[c-p<span class="hljs-number">-1</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">median</span>(A,B,a,b,p+<span class="hljs-number">1</span>,R);<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">median</span>(A,B,a,b,L,p<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,i;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;a;++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;A[i]);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;b;++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;B[i]);<br>    <span class="hljs-comment">//多做的处理</span><br>    A[a]=A[a<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>    B[b]=B[b<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;     <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">median</span>(A,B,a,b,<span class="hljs-number">0</span>,a<span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">leetcode 题  </a></p><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/">优秀题解，多解法</a></p><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/c-er-fen-cha-zhao-by-da-li-wang/">优秀题解，边界处理相当好</a></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m=nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> n=nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(m&gt;n)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">findMedianSortedArrays</span>(nums2,nums1);<br>        <span class="hljs-keyword">int</span> iMin=<span class="hljs-number">0</span>,iMax=m;<br>        <span class="hljs-keyword">while</span>(iMin&lt;=iMax)<br>        &#123;<br>            <span class="hljs-keyword">int</span> i=(iMin+iMax)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> j=(m+n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>-i;<br>            <span class="hljs-keyword">if</span>(j!=<span class="hljs-number">0</span>&amp;&amp;i!=m&amp;&amp;nums2[j<span class="hljs-number">-1</span>]&gt;nums1[i])<br>                iMin=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>&amp;&amp;j!=n&amp;&amp;nums1[i<span class="hljs-number">-1</span>]&gt;nums2[j])<br>                iMax=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> midLeft=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>(!i)  midLeft=nums2[j<span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!j)  midLeft=nums1[i<span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">else</span>    midLeft=<span class="hljs-built_in">max</span>(nums1[i<span class="hljs-number">-1</span>],nums2[j<span class="hljs-number">-1</span>]);<br>                <span class="hljs-keyword">if</span>((m+n)%<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> midLeft;<br><br>                <span class="hljs-keyword">int</span> midRight=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>(i==m)    midRight=nums2[j];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==n)   midRight=nums1[i];<br>                <span class="hljs-keyword">else</span> midRight=<span class="hljs-built_in">min</span>(nums1[i],nums2[j]);<br><br>                <span class="hljs-keyword">return</span> (midLeft+midRight)*<span class="hljs-number">1.0</span>/<span class="hljs-number">2.0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SCNU-Algorithms2020</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针求和</title>
    <link href="/2020/03/31/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/03/31/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>双指针用起来！</p></blockquote><span id="more"></span><h2 id="三数之和"><a class="markdownIt-Anchor" href="#三数之和"></a> <a href="https://leetcode-cn.com/problems/3sum/solution/pai-xu-shuang-zhi-zhen-zhu-xing-jie-shi-python3-by/">三数之和</a></h2><p>双指针的使用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> ans;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> l=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;r)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i]+nums[l]+nums[r]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i],nums[l],nums[r]&#125;);<br>                    <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;nums[l+<span class="hljs-number">1</span>]==nums[l])<br>                        ++l;<br>                    <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;nums[r<span class="hljs-number">-1</span>]==nums[r])<br>                        --r;<br>                    ++l;<br>                    --r;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[i]+nums[l]+nums[r]&lt;<span class="hljs-number">0</span>)<br>                    ++l;<br>                <span class="hljs-keyword">else</span>   <br>                    --r;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="四数之和"><a class="markdownIt-Anchor" href="#四数之和"></a> <a href="https://leetcode-cn.com/problems/4sum/">四数之和</a></h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">fourSum</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-3</span>;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(target&lt;=<span class="hljs-number">0</span>&amp;&amp;nums[i]&gt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(nums[i]+nums[i+<span class="hljs-number">1</span>]+nums[i+<span class="hljs-number">2</span>]+nums[i+<span class="hljs-number">3</span>]&gt;target)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> newtarget=target-nums[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j&gt;i+<span class="hljs-number">1</span>&amp;&amp;nums[j]==nums[j<span class="hljs-number">-1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">int</span> l=j+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">int</span> r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">while</span>(l&lt;r)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(nums[j]+nums[l]+nums[r]==newtarget)<br>                    &#123;<br>                        ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i],nums[j],nums[l],nums[r]&#125;);<br>                        <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;nums[l+<span class="hljs-number">1</span>]==nums[l])<br>                            ++l;<br>                        <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;nums[r<span class="hljs-number">-1</span>]==nums[r])<br>                            --r;<br>                        ++l;<br>                        --r;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[j]+nums[l]+nums[r]&lt;newtarget)<br>                        ++l;<br>                    <span class="hljs-keyword">else</span><br>                        --r;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这两道题都是求几数之和，按这两个套路可以无限套娃做循环得出大于4个数求和的结果，不过相应地要消耗的时间会成倍增加。</p><h2 id="最接近的三数之和"><a class="markdownIt-Anchor" href="#最接近的三数之和"></a> <a href="https://leetcode-cn.com/problems/3sum-closest/solution/bian-liang-de-she-zhi-hen-zhong-yao-by-ling-degu-s/">最接近的三数之和</a></h2><p>这题求的结果是最接近target的三数之和，因此ans初值可以为该数组的前三个数，接下来的套路和三数之和差不多，排序+双指针，先判断sum==target,成功直接跳出，否则做绝对值大小的判断，小于则刷新ans值。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">threeSumClosest</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans=nums[<span class="hljs-number">0</span>]+nums[<span class="hljs-number">1</span>]+nums[<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;r)<br>            &#123;<br>                <span class="hljs-keyword">int</span> sum=nums[i]+nums[l]+nums[r];<br>                <span class="hljs-keyword">if</span>(target==sum)<br>                    <span class="hljs-keyword">return</span> sum;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(target-sum)&lt;<span class="hljs-built_in">abs</span>(target-ans))<br>                    ans=sum;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[i]+nums[l]+nums[r]&lt;target)<br>                    ++l;<br>                <span class="hljs-keyword">else</span>  <br>                    --r;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Permutation</title>
    <link href="/2020/03/28/Permutation/"/>
    <url>/2020/03/28/Permutation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>全排列问题</p></blockquote><span id="more"></span><h2 id="first"><a class="markdownIt-Anchor" href="#first"></a> <a href="https://www.bilibili.com/video/BV1dx411S7WR?from=search&amp;seid=1573155197771675889">First</a></h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> temp=A[i];<br>A[i]=A[j];<br>A[j]=temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintPerm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,A[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Perm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> q)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(p==q)<br>&#123;<br><span class="hljs-built_in">PrintPerm</span>(A,q);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=p;i&lt;q;++i)<br>&#123;<br><span class="hljs-built_in">swap</span>(A,p,i);<br><span class="hljs-built_in">Perm</span>(A,p+<span class="hljs-number">1</span>,q);<br><span class="hljs-built_in">swap</span>(A,p,i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br><span class="hljs-keyword">int</span> *A=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>A[i]=i+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">Perm</span>(A,<span class="hljs-number">0</span>,N);<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="second"><a class="markdownIt-Anchor" href="#second"></a> <a href="https://www.bilibili.com/video/BV1174115769?from=search&amp;seid=1573155197771675889">Second</a></h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 11 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> arr[maxn];<br><span class="hljs-keyword">int</span> vis[maxn];<br><span class="hljs-keyword">int</span> N;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-keyword">int</span> top=<span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Perm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(now==N)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sta[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(vis[i])<br>&#123;<br>vis[i]=<span class="hljs-number">0</span>;<br>sta[++top]=arr[i];<br><span class="hljs-built_in">Perm</span>(now+<span class="hljs-number">1</span>);<br>--top;<br>vis[i]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>arr[i]=i+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">1</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>)*N);<br><span class="hljs-built_in">Perm</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="third课本算法"><a class="markdownIt-Anchor" href="#third课本算法"></a> Third(课本算法)</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 11 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> arr[maxn];<br><span class="hljs-keyword">int</span> N;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Perm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(now==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[i]==<span class="hljs-number">0</span>)<br>&#123;<br>arr[i]=now;<br><span class="hljs-built_in">Perm</span>(now<span class="hljs-number">-1</span>);<br>arr[i]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)<br>arr[i]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">Perm</span>(N);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SCNU-Algorithms2020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N分K份问题</title>
    <link href="/2020/03/27/N%E5%88%86K%E4%BB%BD%E9%97%AE%E9%A2%98/"/>
    <url>/2020/03/27/N%E5%88%86K%E4%BB%BD%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录记录</p></blockquote><span id="more"></span><h1 id="q-n分成k份问有多少种可能"><a class="markdownIt-Anchor" href="#q-n分成k份问有多少种可能"></a> Q: N分成K份，问有多少种可能？</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> now)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(i=now;i&lt;=n/k;++i)<br>s+=<span class="hljs-built_in">f</span>(n-i,k<span class="hljs-number">-1</span>,i);<br><span class="hljs-keyword">return</span> s;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N,K;<br>cin&gt;&gt;N&gt;&gt;K;<br>cout&lt;&lt;<span class="hljs-built_in">f</span>(N,K,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>多个要求:输出每种情况</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">60</span>],s=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<br>&#123;<br>a[pos]=n;<br>s++;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=pos;++j)<br>cout&lt;&lt;a[j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(i=a[pos<span class="hljs-number">-1</span>];i&lt;=n/k;++i)<br>&#123;<br>a[pos]=i;<br><span class="hljs-built_in">f</span>(n-a[pos],k<span class="hljs-number">-1</span>,pos+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N,K;<br>cin&gt;&gt;N&gt;&gt;K;<br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">f</span>(N,K,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>scnu-ACM-class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>出栈序列问题</title>
    <link href="/2020/03/27/%E5%87%BA%E6%A0%88%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <url>/2020/03/27/%E5%87%BA%E6%A0%88%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>好好走路！</p></blockquote><span id="more"></span><h1 id="q-n个元素依次进栈则出栈有多少种方式"><a class="markdownIt-Anchor" href="#q-n个元素依次进栈则出栈有多少种方式"></a> Q: N个元素依次进栈，则出栈有多少种方式？</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-comment">//读到在栈外元素为零时计数加一</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(x<span class="hljs-number">-1</span>,y+<span class="hljs-number">1</span>);<span class="hljs-comment">//当栈为空时，只能入栈</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(x<span class="hljs-number">-1</span>,y+<span class="hljs-number">1</span>)+<span class="hljs-built_in">sum</span>(x,y<span class="hljs-number">-1</span>);<span class="hljs-comment">//入栈和出栈操作都可以做</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N;<br>cin&gt;&gt;N;<br>cout&lt;&lt;<span class="hljs-built_in">sum</span>(N,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>计数问题：答案为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi>C</mi><mi>N</mi><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">\frac{1}{N+1}C^n_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.424669em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span></span></span></span>  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>=</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(N=2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">//另一种情况下的写法，利用引用保存计数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Counter</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sout,<span class="hljs-keyword">int</span> sin,<span class="hljs-keyword">int</span> &amp;sum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(sout==<span class="hljs-number">0</span>)<br>    &#123;<br>        sum++;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">Counter</span>(sout<span class="hljs-number">-1</span>,sin+<span class="hljs-number">1</span>,sum);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sin&gt;<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">Counter</span>(sout,sin<span class="hljs-number">-1</span>,sum);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>scnu-ACM-class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>クローバー</title>
    <link href="/2020/03/26/%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%90%E3%83%BC/"/>
    <url>/2020/03/26/%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%90%E3%83%BC/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%90%E3%83%BC.jpg" alt="" /></p><span id="more"></span><h3 id="クローバー"><a class="markdownIt-Anchor" href="#クローバー"></a> クローバー</h3><p>足りないものなど何もないんだよ</p><p>其实我并没有 缺少什么东西喔</p><p>僕には君がいる　ただそれだけでいい</p><p>只要有你在 我就已心满意足</p><p>花束や夢が雲に隠れてる</p><p>将花束与梦想都埋藏在云中</p><p>ベンチに座る僕　置いてけぼりの鬼</p><p>呆坐在长椅上的我 像个不想与任何人接触的鬼魂</p><p>今日も上手に笑えました　僕は何色なんだろう？</p><p>今天也挤出完美的笑容 我在别人眼里是什么样的呢？</p><p>茜空　発情期の猫が恋を探してる</p><p>夕阳余晖下 春心荡漾的猫咪正在寻找着爱情</p><p>クローバークローバー</p><p>四叶草 四叶草</p><p>君はね僕の太陽なんだ</p><p>而你就是我的太阳</p><p>どんなに暗く閉ざされたって光が見えるから</p><p>无论囚困在多么黑暗的环境中 我都能看见你的光</p><p>僕の手をつかんでつかんで離さないでいてくれないか</p><p>握紧我的手 握紧我的手 可不可以不要再松开</p><p>いつの日かこの歌が風に乗って誰かの愛に変わる日まで</p><p>直到有一天这首歌将随风而去 化成某人的爱</p><p>お金も洋服も何もいらないよ</p><p>金钱与新衣 我都不需要喔</p><p>今日もとなりにいるただそれだけでいい</p><p>只要今天也能够待在你的身边 我就已心满意足</p><p>しょいきれない思い出たちが君をじゃましてるんだね</p><p>承载不下的记忆 成为了你的负担了对吧</p><p>涙色　さまよう君の背中を月が照らしてた</p><p>泪色夜幕下 你彷徨的身影被月光所照亮</p><p>迷って迷って</p><p>迷茫着 迷茫着</p><p>君がね何も見えなくなって</p><p>你渐渐变得看不清方向</p><p>どこかで一人泣いていたって明かりを灯すから</p><p>即使你独自躲在某处落泪 我也会为你将一束灯光点亮</p><p>僕の目を仰いで仰いでそらさないでいてくれないか</p><p>请抬起头 抬起头 可不可以注视着我的双眼 不要躲闪</p><p>このまま朝焼けを迎えにいこうほらうなずいて微笑んでくれ</p><p>就这样去迎接朝阳升起 别哭啦 点头答应我 然后笑一个吧</p><p>クローバークローバー</p><p>四叶草 四叶草</p><p>君はね僕の太陽なんだ</p><p>而你就是我的太阳</p><p>どんなに暗く閉ざされたって光が見えるから</p><p>无论囚困在多么黑暗的环境中 我都能看见你的光</p><p>僕の手をつかんでつかんで離さないでいてくれないか</p><p>握紧我的手 握紧我的手 可不可以别再松开</p><p>いつの日かこの歌が風に乗って誰かの愛に変わる日まで</p><p>直到有一天这首歌将乘风而去 化成某人的爱</p><p>足りないものなど何もないんだよ</p><p>其实我并没有 缺少什么东西喔</p><p>僕には君がいる　ただそれだけでいい</p><p>只要有你在 我就已心满意足</p><p>这首歌对我现在很耐听，记录下留作纪念、</p>]]></content>
    
    
    
    <tags>
      
      <tag>Music</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汉诺塔问题</title>
    <link href="/2020/03/25/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    <url>/2020/03/25/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>好家伙，经典永不过时！</p></blockquote><span id="more"></span><p><a href="https://blog.csdn.net/yhf_naive/article/details/53384148">他人的</a></p><p><a href="https://blog.csdn.net/s136424/article/details/78132623">others</a></p><p><a href="https://www.bilibili.com/video/BV1EE411K7bL?p=1">B站视频</a></p><hr /><h2 id="递归实现"><a class="markdownIt-Anchor" href="#递归实现"></a> 递归实现</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-keyword">char</span> A,<span class="hljs-keyword">char</span> B,<span class="hljs-keyword">char</span> C,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(n)<br>&#123;<br><span class="hljs-built_in">hanoi</span>(A,C,B,n<span class="hljs-number">-1</span>);<br>cout&lt;&lt;A&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;C&lt;&lt;endl;<br><span class="hljs-built_in">hanoi</span>(B,A,C,n<span class="hljs-number">-1</span>); <br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">char</span> a=<span class="hljs-string">&#x27;a&#x27;</span>,b=<span class="hljs-string">&#x27;b&#x27;</span>,c=<span class="hljs-string">&#x27;c&#x27;</span>;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">hanoi</span>(a,b,c,n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="非递归实现"><a class="markdownIt-Anchor" href="#非递归实现"></a> 非递归实现</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">char</span> s[<span class="hljs-number">4</span>]=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>stack&lt;<span class="hljs-keyword">int</span>&gt; a[<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> next)</span></span><br><span class="hljs-function"></span>&#123;<br>a[next].<span class="hljs-built_in">push</span>(a[now].<span class="hljs-built_in">top</span>());<br><span class="hljs-comment">//printf(&quot;%d from %c to %c&quot;,a[now].top(),s[now],s[next]);</span><br>cout&lt;&lt;s[now]&lt;&lt;<span class="hljs-string">&quot; -&gt; &quot;</span>&lt;&lt;s[next]&lt;&lt;endl;<br>a[now].<span class="hljs-built_in">pop</span>();<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n,count=<span class="hljs-number">0</span>;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>a[<span class="hljs-number">1</span>].<span class="hljs-built_in">push</span>(n-i);<br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>)<br>&#123;<br>s[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;c&#x27;</span>;<br>s[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;b&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">int</span> next;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(!a[i].<span class="hljs-built_in">empty</span>()&amp;&amp;a[i].<span class="hljs-built_in">top</span>()==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">3</span>)next=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span>next=i+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">move</span>(i,next);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">2</span>].<span class="hljs-built_in">size</span>()==n||a[<span class="hljs-number">3</span>].<span class="hljs-built_in">size</span>()==n)<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">int</span> other1,other2;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(next)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:&#123;<br>other1=<span class="hljs-number">2</span>;other2=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:&#123;<br>other1=<span class="hljs-number">3</span>;other2=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:&#123;<br>other1=<span class="hljs-number">1</span>;other2=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a[other1].<span class="hljs-built_in">empty</span>())<br><span class="hljs-built_in">move</span>(other2,other1);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[other2].<span class="hljs-built_in">empty</span>())<br><span class="hljs-built_in">move</span>(other1,other2);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(a[other1].<span class="hljs-built_in">top</span>()&lt;a[other2].<span class="hljs-built_in">top</span>())<br><span class="hljs-built_in">move</span>(other1,other2);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">move</span>(other2,other1);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求前缀表达式的值</title>
    <link href="/2020/03/18/%E6%B1%82%E5%89%8D%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC/"/>
    <url>/2020/03/18/%E6%B1%82%E5%89%8D%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>好好学！</p></blockquote><span id="more"></span><h2 id="求前缀表达式的值"><a class="markdownIt-Anchor" href="#求前缀表达式的值"></a> <a href="https://pintia.cn/problem-sets/15/problems/836">求前缀表达式的值</a></h2><p>zhe道题和求后缀表达式的值可以相反过来做，从后面遍历，不过要注意的是操作数的处理，还有空格的跳过。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string Str;<br>    stack&lt;<span class="hljs-keyword">float</span>&gt; ans;<br><span class="hljs-built_in">getline</span>(cin,Str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=Str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(Str[i]))&#123;<span class="hljs-comment">//操作数可能为大于一位的数字（负数）或者是浮点数 </span><br>            <span class="hljs-keyword">float</span> mul=<span class="hljs-number">10</span>,num=Str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">for</span>(i--;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(Str[i]))&#123;<br>            num+=(Str[i]-<span class="hljs-string">&#x27;0&#x27;</span>)*mul;<br>            mul*=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>num/=mul;<br>mul=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>num=-num;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">break</span>; <br>&#125;<br>ans.<span class="hljs-built_in">push</span>(num);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            <span class="hljs-keyword">float</span> a=ans.<span class="hljs-built_in">top</span>();<br>            ans.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">float</span> b=ans.<span class="hljs-built_in">top</span>();<br>            ans.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">float</span> tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                tmp=a+b;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                tmp=a-b;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>                tmp=a*b;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Str[i]==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;ERROR&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>tmp=a/b;<br>            &#125;<br>            ans.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f&quot;</span>,ans.<span class="hljs-built_in">top</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>天梯赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修理牧场</title>
    <link href="/2020/03/01/%E4%BF%AE%E7%90%86%E7%89%A7%E5%9C%BA/"/>
    <url>/2020/03/01/%E4%BF%AE%E7%90%86%E7%89%A7%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Train</p></blockquote><span id="more"></span><h2 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> <a href="https://pintia.cn/problem-sets/15/problems/856">题目链接</a></h2><h3 id="哈夫曼树的考核本质是构建个最优二叉树计算出wpl"><a class="markdownIt-Anchor" href="#哈夫曼树的考核本质是构建个最优二叉树计算出wpl"></a> 哈夫曼树的考核，本质是构建个最优二叉树，计算出WPL</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;</span><br><span class="hljs-comment">//创建了一个优先队列（先出的是最小的）q.top();</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>priority_queue&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; q;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>&#123;<br><span class="hljs-keyword">int</span> num;<br>cin &gt;&gt; num;<br>q.<span class="hljs-built_in">push</span>(num);<br>&#125;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>() != <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">int</span> a = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">int</span> b = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>sum += (a + b);<br>q.<span class="hljs-built_in">push</span>(a + b);<br>&#125;<br>cout &lt;&lt; sum;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>天梯赛</tag>
      
      <tag>数构算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>还原二叉树</title>
    <link href="/2020/02/29/%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/02/29/%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>会还原吗？</p></blockquote><span id="more"></span><h2 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> <a href="https://pintia.cn/problem-sets/15/problems/838">题目链接</a></h2><h3 id="先利用前序和中序序列建树再利用二叉树遍历得到树的高度"><a class="markdownIt-Anchor" href="#先利用前序和中序序列建树再利用二叉树遍历得到树的高度"></a> 先利用前序和中序序列建树，再利用二叉树遍历得到树的高度</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span><br><span class="hljs-keyword">char</span> c;<br>BTNode* left;<br>BTNode* right;<br>&#125;*BTree;<br><br><span class="hljs-function">BTree <span class="hljs-title">CreateBT</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a[], <span class="hljs-keyword">char</span> b[], <span class="hljs-keyword">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>BTree t = <span class="hljs-keyword">new</span> BTNode;<br>t-&gt;c = a[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">int</span> mid;<br><span class="hljs-keyword">for</span> (mid = <span class="hljs-number">0</span>; mid &lt; N; ++mid)<br>&#123;<br><span class="hljs-keyword">if</span> (b[mid] == a[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">break</span>;<br>&#125;<br>t-&gt;left = <span class="hljs-built_in">CreateBT</span>(a+<span class="hljs-number">1</span>,b,mid);<br>t-&gt;right = <span class="hljs-built_in">CreateBT</span>(a+mid+<span class="hljs-number">1</span>,b+mid+<span class="hljs-number">1</span>,N-mid<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T)<br>&#123;<br><span class="hljs-built_in">InOrder</span>(T-&gt;left);<br>cout &lt;&lt; T-&gt;c;<br><span class="hljs-built_in">InOrder</span>(T-&gt;right);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BinaryTreeHeight</span><span class="hljs-params">(BTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> BTreeHeight = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (T)<br>&#123;<br><span class="hljs-keyword">int</span> LeftHeight = <span class="hljs-built_in">BinaryTreeHeight</span>(T-&gt;left);<br><span class="hljs-keyword">int</span> RightHeight = <span class="hljs-built_in">BinaryTreeHeight</span>(T-&gt;right);<br>BTreeHeight = LeftHeight &gt;= RightHeight ? LeftHeight + <span class="hljs-number">1</span> : RightHeight + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> BTreeHeight;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> N;<br>cin &gt;&gt; N;<br><span class="hljs-comment">//a前序    b中序</span><br><span class="hljs-keyword">char</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[N];<br><span class="hljs-keyword">char</span>* b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[N];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>cin &gt;&gt; a[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>cin &gt;&gt; b[i];<br>BTree T = <span class="hljs-built_in">CreateBT</span>(a, b, N);<br><span class="hljs-comment">//InOrder(T);</span><br>cout &lt;&lt; <span class="hljs-built_in">BinaryTreeHeight</span>(T);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>天梯赛</tag>
      
      <tag>数构算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>验证二叉搜索树</title>
    <link href="/2020/02/29/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2020/02/29/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>幼稚的我</p></blockquote><span id="more"></span><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> <a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/">参考链接</a></h2><h1 id="二叉搜索树"><a class="markdownIt-Anchor" href="#二叉搜索树"></a> 二叉搜索树</h1><h2 id="基本结构体"><a class="markdownIt-Anchor" href="#基本结构体"></a> 基本结构体</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    BTNode *lchild;<br>    BTNode *rchild;<br>&#125;*BSTree;<br></code></pre></div></td></tr></table></figure><h2 id="利用引用建树"><a class="markdownIt-Anchor" href="#利用引用建树"></a> 利用引用建树</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertBST</span><span class="hljs-params">(BSTree &amp;T,<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T)<br>    &#123;<br>        BSTree S=<span class="hljs-keyword">new</span> BTNode;<br>        S-&gt;data=x;<br>        S-&gt;lchild=S-&gt;rchild=<span class="hljs-literal">NULL</span>;<br>        T=S;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;T-&gt;data)<br>        <span class="hljs-built_in">InsertBST</span>(T-&gt;lchild,x);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;=T-&gt;data)<br>        <span class="hljs-built_in">InsertBST</span>(T-&gt;rchild,x);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二叉搜索树的中序遍历"><a class="markdownIt-Anchor" href="#二叉搜索树的中序遍历"></a> 二叉搜索树的中序遍历</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//二叉搜索树的中序遍历是一个单调递增的序列。</span><br><span class="hljs-comment">//利用这个特性可以判断一个一个二叉树是否是搜索树。</span><br><span class="hljs-comment">//N是结点数，In数组存放中序遍历结果</span><br><span class="hljs-keyword">int</span> In[N];<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BSTree T)</span><span class="hljs-comment">//root数组的话就是找根节点root</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)<span class="hljs-comment">//root!=-1</span><br>    &#123;<br>    <span class="hljs-built_in">InOrder</span>(T-&gt;lchild);<br>    In[i++]=T-&gt;data;<br>    <span class="hljs-built_in">InOrder</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在main函数里面判断In序列是否单调递增</span><br><span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;t&lt;N;++t)<br>&#123;<br>    <span class="hljs-keyword">if</span>(In[t]&lt;=In[t<span class="hljs-number">-1</span>])<br>    &#123;<br>        flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用二叉搜索树的特性，其中序遍历是递增的特点来判断其是否是一颗二叉搜索树</p><h3 id="leetcode解法"><a class="markdownIt-Anchor" href="#leetcode解法"></a> leetcode解法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">double</span> inorder = - Double.MAX_VALUE;<br><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty() || root != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">while</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        stack.push(root);<br>        root = root.left;<br>      &#125;<br>      root = stack.pop();<br>      <span class="hljs-comment">// If next element in inorder traversal</span><br>      <span class="hljs-comment">// is smaller than the previous one</span><br>      <span class="hljs-comment">// that&#x27;s not BST.</span><br>      <span class="hljs-keyword">if</span> (root.val &lt;= inorder) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      inorder = root.val;<br>      root = root.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br>&#125;<br><br>作者：LeetCode<br>链接：https:<span class="hljs-comment">//leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></div></td></tr></table></figure><h3 id="更多解法"><a class="markdownIt-Anchor" href="#更多解法"></a> 更多解法</h3><ul><li>递归</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">helper</span><span class="hljs-params">(TreeNode node, Integer lower, Integer upper)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-keyword">int</span> val = node.val;<br>    <span class="hljs-keyword">if</span> (lower != <span class="hljs-keyword">null</span> &amp;&amp; val &lt;= lower) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (upper != <span class="hljs-keyword">null</span> &amp;&amp; val &gt;= upper) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-keyword">if</span> (! helper(node.right, val, upper)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (! helper(node.left, lower, val)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> helper(root, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>  &#125;<br>&#125;<br><br>作者：LeetCode<br>链接：https:<span class="hljs-comment">//leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></div></td></tr></table></figure><ul><li>迭代</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  LinkedList&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> LinkedList();<br>  LinkedList&lt;Integer&gt; uppers = <span class="hljs-keyword">new</span> LinkedList(),<br>          lowers = <span class="hljs-keyword">new</span> LinkedList();<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(TreeNode root, Integer lower, Integer upper)</span> </span>&#123;<br>    stack.add(root);<br>    lowers.add(lower);<br>    uppers.add(upper);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    Integer lower = <span class="hljs-keyword">null</span>, upper = <span class="hljs-keyword">null</span>, val;<br>    update(root, lower, upper);<br><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>      root = stack.poll();<br>      lower = lowers.poll();<br>      upper = uppers.poll();<br><br>      <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">continue</span>;<br>      val = root.val;<br>      <span class="hljs-keyword">if</span> (lower != <span class="hljs-keyword">null</span> &amp;&amp; val &lt;= lower) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      <span class="hljs-keyword">if</span> (upper != <span class="hljs-keyword">null</span> &amp;&amp; val &gt;= upper) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      update(root.right, val, upper);<br>      update(root.left, lower, val);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br>&#125;<br><br>作者：LeetCode<br>链接：https:<span class="hljs-comment">//leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
